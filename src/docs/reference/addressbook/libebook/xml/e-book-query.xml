<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libebook-e-book-query">
<refmeta>
<refentrytitle role="top_of_page" id="libebook-e-book-query.top_of_page">e-book-query</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBEBOOK Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>e-book-query</refname>
<refpurpose>Handles queries of addressboook data.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libebook-e-book-query.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>typedef             <link linkend="EBookQuery">EBookQuery</link>;
enum                <link linkend="EBookQueryTest">EBookQueryTest</link>;
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-from-string">e_book_query_from_string</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *query_string</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-book-query-to-string">e_book_query_to_string</link>              (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-ref">e_book_query_ref</link>                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-book-query-unref">e_book_query_unref</link>                  (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-and">e_book_query_and</link>                    (<parameter><link linkend="gint"><type>gint</type></link> nqs</parameter>,
                                                         <parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> **qs</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-andv">e_book_query_andv</link>                   (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-or">e_book_query_or</link>                     (<parameter><link linkend="gint"><type>gint</type></link> nqs</parameter>,
                                                         <parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> **qs</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-orv">e_book_query_orv</link>                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter>...</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-not">e_book_query_not</link>                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-field-exists">e_book_query_field_exists</link>           (<parameter><link linkend="EContactField"><type>EContactField</type></link> field</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-vcard-field-exists">e_book_query_vcard_field_exists</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *field</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-field-test">e_book_query_field_test</link>             (<parameter><link linkend="EContactField"><type>EContactField</type></link> field</parameter>,
                                                         <parameter><link linkend="EBookQueryTest"><type>EBookQueryTest</type></link> test</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-vcard-field-test">e_book_query_vcard_field_test</link>       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *field</parameter>,
                                                         <parameter><link linkend="EBookQueryTest"><type>EBookQueryTest</type></link> test</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-any-field-contains">e_book_query_any_field_contains</link>     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);
<link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         <link linkend="e-book-query-copy">e_book_query_copy</link>                   (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libebook-e-book-query.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="libebook-e-book-query.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EBookQuery" role="typedef">
<title>EBookQuery</title>
<indexterm zone="EBookQuery"><primary>EBookQuery</primary></indexterm>
<programlisting>typedef struct EBookQuery EBookQuery;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="EBookQueryTest" role="enum">
<title>enum EBookQueryTest</title>
<indexterm zone="EBookQueryTest"><primary>EBookQueryTest</primary></indexterm>
<programlisting>typedef enum {
  E_BOOK_QUERY_IS,
  E_BOOK_QUERY_CONTAINS,
  E_BOOK_QUERY_BEGINS_WITH,
  E_BOOK_QUERY_ENDS_WITH

  /*
    Consider these "coming soon".

    E_BOOK_QUERY_LT,
    E_BOOK_QUERY_LE,
    E_BOOK_QUERY_GT,
    E_BOOK_QUERY_GE,
    E_BOOK_QUERY_EQ,
  */
} EBookQueryTest;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="e-book-query-from-string" role="function">
<title>e_book_query_from_string ()</title>
<indexterm zone="e-book-query-from-string"><primary>e_book_query_from_string</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_from_string            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *query_string</parameter>);</programlisting>
<para>
Parse <parameter>query_string</parameter> and return a new <link linkend="EBookQuery"><type>EBookQuery</type></link> representing it.</para>
<variablelist role="params">
<varlistentry><term><parameter>query_string</parameter>&#160;:</term>
<listitem><simpara>the query
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-to-string" role="function">
<title>e_book_query_to_string ()</title>
<indexterm zone="e-book-query-to-string"><primary>e_book_query_to_string</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_book_query_to_string              (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);</programlisting>
<para>
Return the string representation of <parameter>q</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>an <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The string form of the query. This string should be freed when
finished with.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-ref" role="function">
<title>e_book_query_ref ()</title>
<indexterm zone="e-book-query-ref"><primary>e_book_query_ref</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_ref                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);</programlisting>
<para>
Increment the reference count on <parameter>q</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>q</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-unref" role="function">
<title>e_book_query_unref ()</title>
<indexterm zone="e-book-query-unref"><primary>e_book_query_unref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_book_query_unref                  (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);</programlisting>
<para>
Decrement the reference count on <parameter>q</parameter>. When the reference count reaches 0, <parameter>q</parameter>
will be freed and any child queries will have <link linkend="e-book-query-unref"><function>e_book_query_unref()</function></link> called.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>an <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-and" role="function">
<title>e_book_query_and ()</title>
<indexterm zone="e-book-query-and"><primary>e_book_query_and</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_and                    (<parameter><link linkend="gint"><type>gint</type></link> nqs</parameter>,
                                                         <parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> **qs</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);</programlisting>
<para>
Create a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which is the logical AND of the queries in <link linkend="qs"><type>qs</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>nqs</parameter>&#160;:</term>
<listitem><simpara>the number of queries to AND
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>qs</parameter>&#160;:</term>
<listitem><simpara>pointer to an array of <link linkend="EBookQuery"><type>EBookQuery</type></link> items
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unref</parameter>&#160;:</term>
<listitem><simpara>if <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the new query takes ownership of the existing queries
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-andv" role="function">
<title>e_book_query_andv ()</title>
<indexterm zone="e-book-query-andv"><primary>e_book_query_andv</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_andv                   (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which is the logical AND of the queries specified.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>first <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara><link linkend="NULL:CAPS"><type>NULL</type></link> terminated list of <link linkend="EBookQuery"><type>EBookQuery</type></link> pointers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-or" role="function">
<title>e_book_query_or ()</title>
<indexterm zone="e-book-query-or"><primary>e_book_query_or</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_or                     (<parameter><link linkend="gint"><type>gint</type></link> nqs</parameter>,
                                                         <parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> **qs</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which is the logical OR of the queries in <link linkend="qs"><type>qs</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>nqs</parameter>&#160;:</term>
<listitem><simpara>the number of queries to OR
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>qs</parameter>&#160;:</term>
<listitem><simpara>pointer to an array of <link linkend="EBookQuery"><type>EBookQuery</type></link> items
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unref</parameter>&#160;:</term>
<listitem><simpara>if <link linkend="TRUE:CAPS"><type>TRUE</type></link>, the new query takes ownership of the existing queries
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-orv" role="function">
<title>e_book_query_orv ()</title>
<indexterm zone="e-book-query-orv"><primary>e_book_query_orv</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_orv                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which is the logical OR of the queries specified.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>first <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara><link linkend="NULL:CAPS"><type>NULL</type></link> terminated list of <link linkend="EBookQuery"><type>EBookQuery</type></link> pointers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-not" role="function">
<title>e_book_query_not ()</title>
<indexterm zone="e-book-query-not"><primary>e_book_query_not</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_not                    (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> unref</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which is the opposite of #q.</para>
<variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>an <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unref</parameter>&#160;:</term>
<listitem><simpara>if <link linkend="TRUE:CAPS"><type>TRUE</type></link>, the new query takes ownership of the existing queries
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-field-exists" role="function">
<title>e_book_query_field_exists ()</title>
<indexterm zone="e-book-query-field-exists"><primary>e_book_query_field_exists</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_field_exists           (<parameter><link linkend="EContactField"><type>EContactField</type></link> field</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which tests if the field <parameter>field</parameter> exists.</para>
<variablelist role="params">
<varlistentry><term><parameter>field</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="EContactField"><type>EContactField</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-vcard-field-exists" role="function">
<title>e_book_query_vcard_field_exists ()</title>
<indexterm zone="e-book-query-vcard-field-exists"><primary>e_book_query_vcard_field_exists</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_vcard_field_exists     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *field</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which tests if the field <parameter>field</parameter> exists. <parameter>field</parameter>
should be a vCard field name, such as <link linkend="FN:CAPS"><type>FN</type></link> or <link linkend="X-MSN:CAPS"><type>X-MSN</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>field</parameter>&#160;:</term>
<listitem><simpara>a field name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-field-test" role="function">
<title>e_book_query_field_test ()</title>
<indexterm zone="e-book-query-field-test"><primary>e_book_query_field_test</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_field_test             (<parameter><link linkend="EContactField"><type>EContactField</type></link> field</parameter>,
                                                         <parameter><link linkend="EBookQueryTest"><type>EBookQueryTest</type></link> test</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which tests <parameter>field</parameter> for <parameter>value</parameter> using the test <parameter>test</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>field</parameter>&#160;:</term>
<listitem><simpara>an <link linkend="EContactField"><type>EContactField</type></link> to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>test</parameter>&#160;:</term>
<listitem><simpara>the test to apply
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the value to test for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-vcard-field-test" role="function">
<title>e_book_query_vcard_field_test ()</title>
<indexterm zone="e-book-query-vcard-field-test"><primary>e_book_query_vcard_field_test</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_vcard_field_test       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *field</parameter>,
                                                         <parameter><link linkend="EBookQueryTest"><type>EBookQueryTest</type></link> test</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which tests <parameter>field</parameter> for <parameter>value</parameter> using the test <parameter>test</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>field</parameter>&#160;:</term>
<listitem><simpara>a EVCard field name to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>test</parameter>&#160;:</term>
<listitem><simpara>the test to apply
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>the value to test for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-any-field-contains" role="function">
<title>e_book_query_any_field_contains ()</title>
<indexterm zone="e-book-query-any-field-contains"><primary>e_book_query_any_field_contains</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_any_field_contains     (<parameter>const <link linkend="gchar"><type>gchar</type></link> *value</parameter>);</programlisting>
<para>
Creates a new <link linkend="EBookQuery"><type>EBookQuery</type></link> which tests if any field contains <parameter>value</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>a value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="EBookQuery"><type>EBookQuery</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-book-query-copy" role="function">
<title>e_book_query_copy ()</title>
<indexterm zone="e-book-query-copy"><primary>e_book_query_copy</primary></indexterm>
<programlisting><link linkend="EBookQuery"><returnvalue>EBookQuery</returnvalue></link>*         e_book_query_copy                   (<parameter><link linkend="EBookQuery"><type>EBookQuery</type></link> *q</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
