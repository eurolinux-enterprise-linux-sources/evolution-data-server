<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="ECal">
<refmeta>
<refentrytitle role="top_of_page" id="ECal.top_of_page">ECal</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBECAL Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ECal</refname>
<refpurpose>Permits access to a calendar or list of tasks.</refpurpose>
</refnamediv>

<refsynopsisdiv id="ECal.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>                    <link linkend="ECal-struct">ECal</link>;
#define             <link linkend="E-CAL-SET-MODE-STATUS-ENUM-TYPE:CAPS">E_CAL_SET_MODE_STATUS_ENUM_TYPE</link>
#define             <link linkend="CAL-MODE-ENUM-TYPE:CAPS">CAL_MODE_ENUM_TYPE</link>
enum                <link linkend="ECalSourceType">ECalSourceType</link>;
enum                <link linkend="ECalSetModeStatus">ECalSetModeStatus</link>;
enum                <link linkend="ECalLoadState">ECalLoadState</link>;
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             (<link linkend="ECalAuthFunc">*ECalAuthFunc</link>)                     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *prompt</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="e-cal-open-status-enum-get-type">e_cal_open_status_enum_get_type</link>     (<parameter><type>void</type></parameter>);
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="e-cal-source-type-enum-get-type">e_cal_source_type_enum_get_type</link>     (<parameter><type>void</type></parameter>);
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="e-cal-set-mode-status-enum-get-type">e_cal_set_mode_status_enum_get_type</link> (<parameter><type>void</type></parameter>);
<link linkend="GType"><returnvalue>GType</returnvalue></link>               <link linkend="cal-mode-enum-get-type">cal_mode_enum_get_type</link>              (<parameter><type>void</type></parameter>);
<link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              <link linkend="e-cal-new">e_cal_new</link>                           (<parameter><link linkend="ESource"><type>ESource</type></link> *source</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>);
<link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              <link linkend="e-cal-new-from-uri">e_cal_new_from_uri</link>                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>);
<link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              <link linkend="e-cal-new-system-calendar">e_cal_new_system_calendar</link>           (<parameter><type>void</type></parameter>);
<link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              <link linkend="e-cal-new-system-tasks">e_cal_new_system_tasks</link>              (<parameter><type>void</type></parameter>);
<link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              <link linkend="e-cal-new-system-memos">e_cal_new_system_memos</link>              (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-set-auth-func">e_cal_set_auth_func</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="ECalAuthFunc"><type>ECalAuthFunc</type></link> func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-open">e_cal_open</link>                          (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> only_if_exists</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-open-async">e_cal_open_async</link>                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> only_if_exists</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-remove">e_cal_remove</link>                        (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="e-cal-uri-list">e_cal_uri_list</link>                      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="CalMode"><type>CalMode</type></link> mode</parameter>);
<link linkend="ECalSourceType"><returnvalue>ECalSourceType</returnvalue></link>      <link linkend="e-cal-get-source-type">e_cal_get_source_type</link>               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="ECalLoadState"><returnvalue>ECalLoadState</returnvalue></link>       <link linkend="e-cal-get-load-state">e_cal_get_load_state</link>                (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="ESource"><returnvalue>ESource</returnvalue></link> *           <link linkend="e-cal-get-source">e_cal_get_source</link>                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-cal-get-uri">e_cal_get_uri</link>                       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-is-read-only">e_cal_is_read_only</link>                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> *read_only</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-cal-address">e_cal_get_cal_address</link>               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **cal_address</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-alarm-email-address">e_cal_get_alarm_email_address</link>       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **alarm_address</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-ldap-attribute">e_cal_get_ldap_attribute</link>            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **ldap_attribute</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-one-alarm-only">e_cal_get_one_alarm_only</link>            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-organizer-must-attend">e_cal_get_organizer_must_attend</link>     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-save-schedules">e_cal_get_save_schedules</link>            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-static-capability">e_cal_get_static_capability</link>         (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *cap</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-organizer-must-accept">e_cal_get_organizer_must_accept</link>     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-set-mode">e_cal_set_mode</link>                      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="CalMode"><type>CalMode</type></link> mode</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-default-object">e_cal_get_default_object</link>            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-object">e_cal_get_object</link>                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-objects-for-uid">e_cal_get_objects_for_uid</link>           (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-changes">e_cal_get_changes</link>                   (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *change_id</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **changes</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-free-change-list">e_cal_free_change_list</link>              (<parameter><link linkend="GList"><type>GList</type></link> *list</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-object-list">e_cal_get_object_list</link>               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *query</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-object-list-as-comp">e_cal_get_object_list_as_comp</link>       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *query</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-free-object-list">e_cal_free_object_list</link>              (<parameter><link linkend="GList"><type>GList</type></link> *objects</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-free-busy">e_cal_get_free_busy</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> *users</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **freebusy</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-generate-instances">e_cal_generate_instances</link>            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalRecurInstanceFn"><type>ECalRecurInstanceFn</type></link> cb</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> cb_data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-generate-instances-for-object">e_cal_generate_instances_for_object</link> (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalRecurInstanceFn"><type>ECalRecurInstanceFn</type></link> cb</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> cb_data</parameter>);
<link linkend="GSList"><returnvalue>GSList</returnvalue></link> *            <link linkend="e-cal-get-alarms-in-range">e_cal_get_alarms_in_range</link>           (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-cal-free-alarms">e_cal_free_alarms</link>                   (<parameter><link linkend="GSList"><type>GSList</type></link> *comp_alarms</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-alarms-for-object">e_cal_get_alarms_for_object</link>         (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="ECalComponentId"><type>ECalComponentId</type></link> *id</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalComponentAlarms"><type>ECalComponentAlarms</type></link> **alarms</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-create-object">e_cal_create_object</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **uid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-modify-object">e_cal_modify_object</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="CalObjModType"><type>CalObjModType</type></link> mod</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-remove-object">e_cal_remove_object</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-remove-object-with-mod">e_cal_remove_object_with_mod</link>        (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="CalObjModType"><type>CalObjModType</type></link> mod</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-discard-alarm">e_cal_discard_alarm</link>                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="ECalComponent"><type>ECalComponent</type></link> *comp</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *auid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-receive-objects">e_cal_receive_objects</link>               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-send-objects">e_cal_send_objects</link>                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **users</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **modified_icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-timezone">e_cal_get_timezone</link>                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tzid</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> **zone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-add-timezone">e_cal_add_timezone</link>                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> *izone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-set-default-timezone">e_cal_set_default_timezone</link>          (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> *zone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-query">e_cal_get_query</link>                     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *sexp</parameter>,
                                                         <parameter><link linkend="ECalView"><type>ECalView</type></link> **query</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="icaltimezone"><returnvalue>icaltimezone</returnvalue></link> *      <link linkend="e-cal-resolve-tzid-cb">e_cal_resolve_tzid_cb</link>               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tzid</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-cal-get-component-as-string">e_cal_get_component_as_string</link>       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-cal-get-error-message">e_cal_get_error_message</link>             (<parameter><link linkend="ECalendarStatus"><type>ECalendarStatus</type></link> status</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-open-default">e_cal_open_default</link>                  (<parameter><link linkend="ECal"><type>ECal</type></link> **ecal</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="ECalAuthFunc"><type>ECalAuthFunc</type></link> func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-set-default">e_cal_set_default</link>                   (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-set-default-source">e_cal_set_default_source</link>            (<parameter><link linkend="ESource"><type>ESource</type></link> *source</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-sources">e_cal_get_sources</link>                   (<parameter><link linkend="ESourceList"><type>ESourceList</type></link> **sources</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-cal-get-local-attachment-store">e_cal_get_local_attachment_store</link>    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-recurrences-no-master">e_cal_get_recurrences_no_master</link>     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="e-cal-get-attachments-for-comp">e_cal_get_attachments_for_comp</link>      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="GSList"><type>GSList</type></link> **list</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="ECal.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----ECal
</synopsis>
</refsect1>
<refsect1 id="ECal.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="ECal-backend-died">backend-died</link>&quot;                                   : Run First
  &quot;<link linkend="ECal-backend-error">backend-error</link>&quot;                                  : Run First
  &quot;<link linkend="ECal-cal-opened">cal-opened</link>&quot;                                     : Run First
  &quot;<link linkend="ECal-cal-set-mode">cal-set-mode</link>&quot;                                   : Run First
</synopsis>
</refsect1>

<refsect1 id="ECal.description" role="desc">
<title role="desc.title">Description</title>
<para>
Represents an entire calendar or task list, not individual items within them.2
</para>
</refsect1>
<refsect1 id="ECal.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="ECal-struct" role="struct">
<title>ECal</title>
<indexterm zone="ECal-struct"><primary>ECal</primary></indexterm>
<programlisting>typedef struct _ECal ECal;</programlisting>
<para>
</para></refsect2>
<refsect2 id="E-CAL-SET-MODE-STATUS-ENUM-TYPE:CAPS" role="macro">
<title>E_CAL_SET_MODE_STATUS_ENUM_TYPE</title>
<indexterm zone="E-CAL-SET-MODE-STATUS-ENUM-TYPE:CAPS"><primary>E_CAL_SET_MODE_STATUS_ENUM_TYPE</primary></indexterm>
<programlisting>#define E_CAL_SET_MODE_STATUS_ENUM_TYPE (e_cal_set_mode_status_enum_get_type ())
</programlisting>
<para>
</para></refsect2>
<refsect2 id="CAL-MODE-ENUM-TYPE:CAPS" role="macro">
<title>CAL_MODE_ENUM_TYPE</title>
<indexterm zone="CAL-MODE-ENUM-TYPE:CAPS"><primary>CAL_MODE_ENUM_TYPE</primary></indexterm>
<programlisting>#define CAL_MODE_ENUM_TYPE                   (cal_mode_enum_get_type ())
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ECalSourceType" role="enum">
<title>enum ECalSourceType</title>
<indexterm zone="ECalSourceType"><primary>ECalSourceType</primary></indexterm>
<programlisting>typedef enum {
	E_CAL_SOURCE_TYPE_EVENT,
	E_CAL_SOURCE_TYPE_TODO,
	E_CAL_SOURCE_TYPE_JOURNAL,
	E_CAL_SOURCE_TYPE_LAST
} ECalSourceType;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ECalSetModeStatus" role="enum">
<title>enum ECalSetModeStatus</title>
<indexterm zone="ECalSetModeStatus"><primary>ECalSetModeStatus</primary></indexterm>
<programlisting>typedef enum {
	E_CAL_SET_MODE_SUCCESS,
	E_CAL_SET_MODE_ERROR,
	E_CAL_SET_MODE_NOT_SUPPORTED
} ECalSetModeStatus;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ECalLoadState" role="enum">
<title>enum ECalLoadState</title>
<indexterm zone="ECalLoadState"><primary>ECalLoadState</primary></indexterm>
<programlisting>typedef enum {
	E_CAL_LOAD_NOT_LOADED,
	E_CAL_LOAD_AUTHENTICATING,
	E_CAL_LOAD_LOADING,
	E_CAL_LOAD_LOADED
} ECalLoadState;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ECalAuthFunc" role="function">
<title>ECalAuthFunc ()</title>
<indexterm zone="ECalAuthFunc"><primary>ECalAuthFunc</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             (*ECalAuthFunc)                     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *prompt</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prompt</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-open-status-enum-get-type" role="function">
<title>e_cal_open_status_enum_get_type ()</title>
<indexterm zone="e-cal-open-status-enum-get-type"><primary>e_cal_open_status_enum_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               e_cal_open_status_enum_get_type     (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-source-type-enum-get-type" role="function">
<title>e_cal_source_type_enum_get_type ()</title>
<indexterm zone="e-cal-source-type-enum-get-type"><primary>e_cal_source_type_enum_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               e_cal_source_type_enum_get_type     (<parameter><type>void</type></parameter>);</programlisting>
<para>
Registers the <link linkend="ECalSourceTypeEnum"><type>ECalSourceTypeEnum</type></link> type with glib.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID of the <link linkend="ECalSourceTypeEnum"><type>ECalSourceTypeEnum</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-mode-status-enum-get-type" role="function">
<title>e_cal_set_mode_status_enum_get_type ()</title>
<indexterm zone="e-cal-set-mode-status-enum-get-type"><primary>e_cal_set_mode_status_enum_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               e_cal_set_mode_status_enum_get_type (<parameter><type>void</type></parameter>);</programlisting>
<para>
Registers the <link linkend="ECalSetModeStatusEnum"><type>ECalSetModeStatusEnum</type></link> type with glib.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID of the <link linkend="ECalSetModeStatusEnum"><type>ECalSetModeStatusEnum</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cal-mode-enum-get-type" role="function">
<title>cal_mode_enum_get_type ()</title>
<indexterm zone="cal-mode-enum-get-type"><primary>cal_mode_enum_get_type</primary></indexterm>
<programlisting><link linkend="GType"><returnvalue>GType</returnvalue></link>               cal_mode_enum_get_type              (<parameter><type>void</type></parameter>);</programlisting>
<para>
Registers the <link linkend="CalModeEnum"><type>CalModeEnum</type></link> type with glib.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ID of the <link linkend="CalModeEnum"><type>CalModeEnum</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-new" role="function">
<title>e_cal_new ()</title>
<indexterm zone="e-cal-new"><primary>e_cal_new</primary></indexterm>
<programlisting><link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              e_cal_new                           (<parameter><link linkend="ESource"><type>ESource</type></link> *source</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>);</programlisting>
<para>
Creates a new calendar client. This does not open the calendar itself,
for that, <link linkend="e-cal-open"><type>e_cal_open</type></link> or <link linkend="e-cal-open-async"><type>e_cal_open_async</type></link> needs to be called.</para>
<variablelist role="params">
<varlistentry><term><parameter>source</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="ESource"><type>ESource</type></link> to be used for the client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>Type of the client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly-created calendar client, or NULL if the client could
not be constructed because it could not contact the calendar server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-new-from-uri" role="function">
<title>e_cal_new_from_uri ()</title>
<indexterm zone="e-cal-new-from-uri"><primary>e_cal_new_from_uri</primary></indexterm>
<programlisting><link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              e_cal_new_from_uri                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>);</programlisting>
<para>
Creates a new calendar client. This does not open the calendar itself,
for that, <link linkend="e-cal-open"><type>e_cal_open</type></link> or <link linkend="e-cal-open-async"><type>e_cal_open_async</type></link> needs to be called.</para>
<variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>The URI pointing to the calendar to open.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>Type of the client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly-created calendar client, or NULL if the client could
not be constructed because it could not contact the calendar server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-new-system-calendar" role="function">
<title>e_cal_new_system_calendar ()</title>
<indexterm zone="e-cal-new-system-calendar"><primary>e_cal_new_system_calendar</primary></indexterm>
<programlisting><link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              e_cal_new_system_calendar           (<parameter><type>void</type></parameter>);</programlisting>
<para>
Create a calendar client for the system calendar, which should always be present in
all Evolution installations. This does not open the calendar itself,
for that, <link linkend="e-cal-open"><type>e_cal_open</type></link> or <link linkend="e-cal-open-async"><type>e_cal_open_async</type></link> needs to be called.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly-created calendar client, or NULL if the client could
not be constructed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-new-system-tasks" role="function">
<title>e_cal_new_system_tasks ()</title>
<indexterm zone="e-cal-new-system-tasks"><primary>e_cal_new_system_tasks</primary></indexterm>
<programlisting><link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              e_cal_new_system_tasks              (<parameter><type>void</type></parameter>);</programlisting>
<para>
Create a calendar client for the system task list, which should always be present in
all Evolution installations. This does not open the tasks list itself,
for that, <link linkend="e-cal-open"><type>e_cal_open</type></link> or <link linkend="e-cal-open-async"><type>e_cal_open_async</type></link> needs to be called.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly-created calendar client, or NULL if the client could
not be constructed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-new-system-memos" role="function">
<title>e_cal_new_system_memos ()</title>
<indexterm zone="e-cal-new-system-memos"><primary>e_cal_new_system_memos</primary></indexterm>
<programlisting><link linkend="ECal"><returnvalue>ECal</returnvalue></link> *              e_cal_new_system_memos              (<parameter><type>void</type></parameter>);</programlisting>
<para>
Create a calendar client for the system memos, which should always be present
in all Evolution installations. This does not open the memos itself, for
that, <link linkend="e-cal-open"><type>e_cal_open</type></link> or <link linkend="e-cal-open-async"><type>e_cal_open_async</type></link> needs to be called.</para>
<variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly-created calendar client, or NULL if the client could
not be constructed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-auth-func" role="function">
<title>e_cal_set_auth_func ()</title>
<indexterm zone="e-cal-set-auth-func"><primary>e_cal_set_auth_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_set_auth_func                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="ECalAuthFunc"><type>ECalAuthFunc</type></link> func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
Sets the given authentication function on the calendar client. This
function will be called any time the calendar server needs a
password for an operation associated with the calendar and should
be supplied before any calendar is opened.
</para>
<para>
When a calendar is opened asynchronously, the open function is
processed in a concurrent thread.  This means that the
authentication function will also be called from this thread.  As
such, the authentication callback cannot directly call any
functions that must be called from the main thread.  For example
any Gtk+ related functions, which must be proxied synchronously to
the main thread by the callback.
</para>
<para>
The authentication function has the following signature
(ECalAuthFunc):
gchar * auth_func (ECal *ecal,
		  const gchar *prompt,
		  const gchar *key,
		  gpointer user_data)</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>The authentication function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>User data to be used when calling the authentication function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-open" role="function">
<title>e_cal_open ()</title>
<indexterm zone="e-cal-open"><primary>e_cal_open</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_open                          (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> only_if_exists</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Makes a calendar client initiate a request to open a calendar.  The calendar
client will emit the "cal_opened" signal when the response from the server is
received.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>only_if_exists</parameter>&#160;:</term>
<listitem><simpara>FALSE if the calendar should be opened even if there
was no storage for it, i.e. to create a new calendar or load an existing
one if it already exists.  TRUE if it should only try to load calendars
that already exist.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE on failure to issue the open request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-open-async" role="function">
<title>e_cal_open_async ()</title>
<indexterm zone="e-cal-open-async"><primary>e_cal_open_async</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_open_async                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> only_if_exists</parameter>);</programlisting>
<para>
Open the calendar asynchronously.  The calendar will emit the
"cal_opened" signal when the operation has completed.
</para>
<para>
Because this operation runs in another thread, any authentication
callback set on the calendar will be called from this other thread.
See #<link linkend="e-cal-set-auth-func"><function>e_cal_set_auth_func()</function></link> for details.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>only_if_exists</parameter>&#160;:</term>
<listitem><simpara>If TRUE, then only open the calendar if it already
exists.  If FALSE, then create a new calendar if it doesn't already
exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-remove" role="function">
<title>e_cal_remove ()</title>
<indexterm zone="e-cal-remove"><primary>e_cal_remove</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_remove                        (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Removes a calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the calendar was removed, FALSE if there was an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-uri-list" role="function">
<title>e_cal_uri_list ()</title>
<indexterm zone="e-cal-uri-list"><primary>e_cal_uri_list</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             e_cal_uri_list                      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="CalMode"><type>CalMode</type></link> mode</parameter>);</programlisting>
<para>
Retrieves a list of all calendar clients for the given mode.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>Mode of the URIs to get.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> list of uris.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-source-type" role="function">
<title>e_cal_get_source_type ()</title>
<indexterm zone="e-cal-get-source-type"><primary>e_cal_get_source_type</primary></indexterm>
<programlisting><link linkend="ECalSourceType"><returnvalue>ECalSourceType</returnvalue></link>      e_cal_get_source_type               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Gets the type of the calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an <link linkend="ECalSourceType"><type>ECalSourceType</type></link> value corresponding to the type
of the calendar client.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-load-state" role="function">
<title>e_cal_get_load_state ()</title>
<indexterm zone="e-cal-get-load-state"><primary>e_cal_get_load_state</primary></indexterm>
<programlisting><link linkend="ECalLoadState"><returnvalue>ECalLoadState</returnvalue></link>       e_cal_get_load_state                (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Queries the state of loading of a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="ECalLoadState"><type>ECalLoadState</type></link> value indicating whether the client has
not been loaded with <link linkend="e-cal-open"><type>e_cal_open</type></link> yet, whether it is being
loaded, or whether it is already loaded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-source" role="function">
<title>e_cal_get_source ()</title>
<indexterm zone="e-cal-get-source"><primary>e_cal_get_source</primary></indexterm>
<programlisting><link linkend="ESource"><returnvalue>ESource</returnvalue></link> *           e_cal_get_source                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Queries the source that is open in a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The source of the calendar that is already loaded or is being
loaded, or NULL if the ecal has not started a load request yet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-uri" role="function">
<title>e_cal_get_uri ()</title>
<indexterm zone="e-cal-get-uri"><primary>e_cal_get_uri</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_cal_get_uri                       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Queries the URI that is open in a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The URI of the calendar that is already loaded or is being
loaded, or NULL if the client has not started a load request yet.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-is-read-only" role="function">
<title>e_cal_is_read_only ()</title>
<indexterm zone="e-cal-is-read-only"><primary>e_cal_is_read_only</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_is_read_only                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> *read_only</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries whether the calendar client can perform modifications
on the calendar or not. Whether the backend is read only or not
is specified, on exit, in the <parameter>read_only</parameter> argument.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>read_only</parameter>&#160;:</term>
<listitem><simpara>Return value for read only status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE if there was an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-cal-address" role="function">
<title>e_cal_get_cal_address ()</title>
<indexterm zone="e-cal-get-cal-address"><primary>e_cal_get_cal_address</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_cal_address               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **cal_address</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries the calendar address associated with a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cal_address</parameter>&#160;:</term>
<listitem><simpara>Return value for address information.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE if there
was an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-alarm-email-address" role="function">
<title>e_cal_get_alarm_email_address ()</title>
<indexterm zone="e-cal-get-alarm-email-address"><primary>e_cal_get_alarm_email_address</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_alarm_email_address       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **alarm_address</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries the address to be used for alarms in a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alarm_address</parameter>&#160;:</term>
<listitem><simpara>Return value for alarm address.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE if there was
an error while contacting the backend.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-ldap-attribute" role="function">
<title>e_cal_get_ldap_attribute ()</title>
<indexterm zone="e-cal-get-ldap-attribute"><primary>e_cal_get_ldap_attribute</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_ldap_attribute            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **ldap_attribute</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries the LDAP attribute for a calendar client.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ldap_attribute</parameter>&#160;:</term>
<listitem><simpara>Return value for the LDAP attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE if there was an
error contacting the backend.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-one-alarm-only" role="function">
<title>e_cal_get_one_alarm_only ()</title>
<indexterm zone="e-cal-get-one-alarm-only"><primary>e_cal_get_one_alarm_only</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_one_alarm_only            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Checks if a calendar supports only one alarm per component.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the calendar allows only one alarm, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-organizer-must-attend" role="function">
<title>e_cal_get_organizer_must_attend ()</title>
<indexterm zone="e-cal-get-organizer-must-attend"><primary>e_cal_get_organizer_must_attend</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_organizer_must_attend     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Checks if a calendar forces organizers of meetings to be also attendees.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the calendar forces organizers to attend meetings,
FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-save-schedules" role="function">
<title>e_cal_get_save_schedules ()</title>
<indexterm zone="e-cal-get-save-schedules"><primary>e_cal_get_save_schedules</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_save_schedules            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Checks whether the calendar saves schedules.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if it saves schedules, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-static-capability" role="function">
<title>e_cal_get_static_capability ()</title>
<indexterm zone="e-cal-get-static-capability"><primary>e_cal_get_static_capability</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_static_capability         (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *cap</parameter>);</programlisting>
<para>
Queries the calendar for static capabilities.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cap</parameter>&#160;:</term>
<listitem><simpara>Name of the static capability to check.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the capability is supported, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-organizer-must-accept" role="function">
<title>e_cal_get_organizer_must_accept ()</title>
<indexterm zone="e-cal-get-organizer-must-accept"><primary>e_cal_get_organizer_must_accept</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_organizer_must_accept     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Checks whether a calendar requires organizer to accept their attendance to
meetings.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the calendar requires organizers to accept, FALSE
otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-mode" role="function">
<title>e_cal_set_mode ()</title>
<indexterm zone="e-cal-set-mode"><primary>e_cal_set_mode</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_set_mode                      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="CalMode"><type>CalMode</type></link> mode</parameter>);</programlisting>
<para>
Switches online/offline mode on the calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>Mode to switch to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the switch was successful, FALSE if there was an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-default-object" role="function">
<title>e_cal_get_default_object ()</title>
<indexterm zone="e-cal-get-default-object"><primary>e_cal_get_default_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_default_object            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Retrives an <link linkend="icalcomponent"><type>icalcomponent</type></link> from the backend that contains the default
values for properties needed.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>Return value for the default object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-object" role="function">
<title>e_cal_get_object ()</title>
<indexterm zone="e-cal-get-object"><primary>e_cal_get_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_object                    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries a calendar for a calendar component object based on its unique
identifier.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>Unique identifier for a calendar component.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rid</parameter>&#160;:</term>
<listitem><simpara>Recurrence identifier.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>Return value for the calendar component object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-objects-for-uid" role="function">
<title>e_cal_get_objects_for_uid ()</title>
<indexterm zone="e-cal-get-objects-for-uid"><primary>e_cal_get_objects_for_uid</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_objects_for_uid           (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries a calendar for all calendar components with the given unique
ID. This will return any recurring event and all its detached recurrences.
For non-recurring events, it will just return the object with that ID.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>Unique identifier for a calendar component.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>objects</parameter>&#160;:</term>
<listitem><simpara>Return value for the list of objects obtained from the backend.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-changes" role="function">
<title>e_cal_get_changes ()</title>
<indexterm zone="e-cal-get-changes"><primary>e_cal_get_changes</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_changes                   (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *change_id</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **changes</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns a list of changes made to the calendar since a specific time. That time
is identified by the <parameter>change_id</parameter> argument, which is used by the backend to
compute the changes done.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>change_id</parameter>&#160;:</term>
<listitem><simpara>ID to use for comparing changes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>changes</parameter>&#160;:</term>
<listitem><simpara>Return value for the list of changes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-free-change-list" role="function">
<title>e_cal_free_change_list ()</title>
<indexterm zone="e-cal-free-change-list"><primary>e_cal_free_change_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_free_change_list              (<parameter><link linkend="GList"><type>GList</type></link> *list</parameter>);</programlisting>
<para>
Free a list of changes as returned by <link linkend="e-cal-get-changes"><type>e_cal_get_changes</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>List of changes to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-object-list" role="function">
<title>e_cal_get_object_list ()</title>
<indexterm zone="e-cal-get-object-list"><primary>e_cal_get_object_list</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_object_list               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *query</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Gets a list of objects from the calendar that match the query specified
by the <parameter>query</parameter> argument. The objects will be returned in the <parameter>objects</parameter>
argument, which is a list of <link linkend="icalcomponent"><type>icalcomponent</type></link>. When done, this list
should be freed by using the <link linkend="e-cal-free-object-list"><type>e_cal_free_object_list</type></link> function.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&#160;:</term>
<listitem><simpara>Query string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>objects</parameter>&#160;:</term>
<listitem><simpara>Return value for list of objects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-object-list-as-comp" role="function">
<title>e_cal_get_object_list_as_comp ()</title>
<indexterm zone="e-cal-get-object-list-as-comp"><primary>e_cal_get_object_list_as_comp</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_object_list_as_comp       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *query</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **objects</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Gets a list of objects from the calendar that match the query specified
by the <parameter>query</parameter> argument. The objects will be returned in the <parameter>objects</parameter>
argument, which is a list of <link linkend="ECalComponent"><type>ECalComponent</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&#160;:</term>
<listitem><simpara>Query string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>objects</parameter>&#160;:</term>
<listitem><simpara>Return value for list of objects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-free-object-list" role="function">
<title>e_cal_free_object_list ()</title>
<indexterm zone="e-cal-free-object-list"><primary>e_cal_free_object_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_free_object_list              (<parameter><link linkend="GList"><type>GList</type></link> *objects</parameter>);</programlisting>
<para>
Frees a list of objects as returned by <link linkend="e-cal-get-object-list"><type>e_cal_get_object_list</type></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>objects</parameter>&#160;:</term>
<listitem><simpara>List of objects to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-free-busy" role="function">
<title>e_cal_get_free_busy ()</title>
<indexterm zone="e-cal-get-free-busy"><primary>e_cal_get_free_busy</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_free_busy                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> *users</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **freebusy</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Gets free/busy information from the calendar server.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>users</parameter>&#160;:</term>
<listitem><simpara>List of users to retrieve free/busy information for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara>Start time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&#160;:</term>
<listitem><simpara>End time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>freebusy</parameter>&#160;:</term>
<listitem><simpara>Return value for VFREEBUSY objects.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-generate-instances" role="function">
<title>e_cal_generate_instances ()</title>
<indexterm zone="e-cal-generate-instances"><primary>e_cal_generate_instances</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_generate_instances            (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalRecurInstanceFn"><type>ECalRecurInstanceFn</type></link> cb</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> cb_data</parameter>);</programlisting>
<para>
Does a combination of #<link linkend="e-cal-get-object-list"><function>e_cal_get_object_list()</function></link> and
#<link linkend="e-cal-recur-generate-instances"><function>e_cal_recur_generate_instances()</function></link>.
</para>
<para>
The callback function should do a <link linkend="g-object-ref"><function>g_object_ref()</function></link> of the calendar component
it gets passed if it intends to keep it around, since it will be unref'ed
as soon as the callback returns.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara>Start time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&#160;:</term>
<listitem><simpara>End time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>Callback for each generated instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb_data</parameter>&#160;:</term>
<listitem><simpara>Closure data for the callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-generate-instances-for-object" role="function">
<title>e_cal_generate_instances_for_object ()</title>
<indexterm zone="e-cal-generate-instances-for-object"><primary>e_cal_generate_instances_for_object</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_generate_instances_for_object (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalRecurInstanceFn"><type>ECalRecurInstanceFn</type></link> cb</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> cb_data</parameter>);</programlisting>
<para>
Does a combination of #<link linkend="e-cal-get-object-list"><function>e_cal_get_object_list()</function></link> and
#<link linkend="e-cal-recur-generate-instances"><function>e_cal_recur_generate_instances()</function></link>, like #<link linkend="e-cal-generate-instances"><function>e_cal_generate_instances()</function></link>, but
for a single object.
</para>
<para>
The callback function should do a <link linkend="g-object-ref"><function>g_object_ref()</function></link> of the calendar component
it gets passed if it intends to keep it around, since it will be unref'ed
as soon as the callback returns.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>Object to generate instances from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara>Start time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&#160;:</term>
<listitem><simpara>End time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>Callback for each generated instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb_data</parameter>&#160;:</term>
<listitem><simpara>Closure data for the callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-alarms-in-range" role="function">
<title>e_cal_get_alarms_in_range ()</title>
<indexterm zone="e-cal-get-alarms-in-range"><primary>e_cal_get_alarms_in_range</primary></indexterm>
<programlisting><link linkend="GSList"><returnvalue>GSList</returnvalue></link> *            e_cal_get_alarms_in_range           (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>);</programlisting>
<para>
Queries a calendar for the alarms that trigger in the specified range of
time.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara>Start time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&#160;:</term>
<listitem><simpara>End time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A list of <link linkend="ECalComponentAlarms"><type>ECalComponentAlarms</type></link> structures.  This should be freed
using the #<link linkend="e-cal-free-alarms"><function>e_cal_free_alarms()</function></link> function, or by freeing each element
separately with #<link linkend="e-cal-component-alarms-free"><function>e_cal_component_alarms_free()</function></link> and then freeing the list with
#<link linkend="g-slist-free"><function>g_slist_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-free-alarms" role="function">
<title>e_cal_free_alarms ()</title>
<indexterm zone="e-cal-free-alarms"><primary>e_cal_free_alarms</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_cal_free_alarms                   (<parameter><link linkend="GSList"><type>GSList</type></link> *comp_alarms</parameter>);</programlisting>
<para>
Frees a list of <link linkend="ECalComponentAlarms"><type>ECalComponentAlarms</type></link> structures as returned by
<link linkend="e-cal-get-alarms-in-range"><function>e_cal_get_alarms_in_range()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>comp_alarms</parameter>&#160;:</term>
<listitem><simpara>A list of <link linkend="ECalComponentAlarms"><type>ECalComponentAlarms</type></link> structures.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-alarms-for-object" role="function">
<title>e_cal_get_alarms_for_object ()</title>
<indexterm zone="e-cal-get-alarms-for-object"><primary>e_cal_get_alarms_for_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_alarms_for_object         (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="ECalComponentId"><type>ECalComponentId</type></link> *id</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> start</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> end</parameter>,
                                                         <parameter><link linkend="ECalComponentAlarms"><type>ECalComponentAlarms</type></link> **alarms</parameter>);</programlisting>
<para>
Queries a calendar for the alarms of a particular object that trigger in the
specified range of time.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>Unique identifier for a calendar component.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara>Start time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&#160;:</term>
<listitem><simpara>End time for query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alarms</parameter>&#160;:</term>
<listitem><simpara>Return value for the component's alarm instances.  Will return NULL
if no instances occur within the specified time range.  This should be freed
using the <link linkend="e-cal-component-alarms-free"><function>e_cal_component_alarms_free()</function></link> function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE on success, FALSE if the object was not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-create-object" role="function">
<title>e_cal_create_object ()</title>
<indexterm zone="e-cal-create-object"><primary>e_cal_create_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_create_object                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> **uid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Requests the calendar backend to create the object specified by the <parameter>icalcomp</parameter>
argument. Some backends would assign a specific UID to the newly created object,
in those cases that UID would be returned in the <parameter>uid</parameter> argument.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>The component to create.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>Return value for the UID assigned to the new component by the calendar backend.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-modify-object" role="function">
<title>e_cal_modify_object ()</title>
<indexterm zone="e-cal-modify-object"><primary>e_cal_modify_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_modify_object                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="CalObjModType"><type>CalObjModType</type></link> mod</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Requests the calendar backend to modify an existing object. If the object
does not exist on the calendar, an error will be returned.
</para>
<para>
For recurrent appointments, the <parameter>mod</parameter> argument specifies what to modify,
if all instances (CALOBJ_MOD_ALL), a single instance (CALOBJ_MOD_THIS),
or a specific set of instances (CALOBJ_MOD_THISNADPRIOR and
CALOBJ_MOD_THISANDFUTURE).</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>Component to modify.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mod</parameter>&#160;:</term>
<listitem><simpara>Type of modification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-remove-object" role="function">
<title>e_cal_remove_object ()</title>
<indexterm zone="e-cal-remove-object"><primary>e_cal_remove_object</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_remove_object                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Asks a calendar to remove a component.  If the server is able to remove the
component, all clients will be notified and they will emit the "obj_removed"
signal.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>Unique identifier of the calendar component to remove.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-remove-object-with-mod" role="function">
<title>e_cal_remove_object_with_mod ()</title>
<indexterm zone="e-cal-remove-object-with-mod"><primary>e_cal_remove_object_with_mod</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_remove_object_with_mod        (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="CalObjModType"><type>CalObjModType</type></link> mod</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
This function allows the removal of instances of a recurrent
appointment. By using a combination of the <parameter>uid</parameter>, <parameter>rid</parameter> and <parameter>mod</parameter>
arguments, you can remove specific instances. If what you want
is to remove all instances, use e_cal_remove_object instead.
</para>
<para>
If not all instances are removed, the client will get a "obj_modified"
signal, while it will get a "obj_removed" signal when all instances
are removed.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>UID og the object to remove.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rid</parameter>&#160;:</term>
<listitem><simpara>Recurrence ID of the specific recurrence to remove.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mod</parameter>&#160;:</term>
<listitem><simpara>Type of removal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-discard-alarm" role="function">
<title>e_cal_discard_alarm ()</title>
<indexterm zone="e-cal-discard-alarm"><primary>e_cal_discard_alarm</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_discard_alarm                 (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="ECalComponent"><type>ECalComponent</type></link> *comp</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *auid</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Tells the calendar backend to get rid of the alarm identified by the
<parameter>auid</parameter> argument in <parameter>comp</parameter>. Some backends might remove the alarm or
update internal information about the alarm be discarded, or, like
the file backend does, ignore the operation.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar ecal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comp</parameter>&#160;:</term>
<listitem><simpara>The component to discard the alarm from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auid</parameter>&#160;:</term>
<listitem><simpara>Unique identifier of the alarm to be discarded.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-receive-objects" role="function">
<title>e_cal_receive_objects ()</title>
<indexterm zone="e-cal-receive-objects"><primary>e_cal_receive_objects</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_receive_objects               (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Makes the backend receive the set of iCalendar objects specified in the
<parameter>icalcomp</parameter> argument. This is used for iTIP confirmation/cancellation
messages for scheduled meetings.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>An icalcomponent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-send-objects" role="function">
<title>e_cal_send_objects ()</title>
<indexterm zone="e-cal-send-objects"><primary>e_cal_send_objects</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_send_objects                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> **users</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> **modified_icalcomp</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Requests a calendar backend to send meeting information to the specified list
of users.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>An icalcomponent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>users</parameter>&#160;:</term>
<listitem><simpara>List of users to send the objects to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modified_icalcomp</parameter>&#160;:</term>
<listitem><simpara>Return value for the icalcomponent after all the operations
performed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-timezone" role="function">
<title>e_cal_get_timezone ()</title>
<indexterm zone="e-cal-get-timezone"><primary>e_cal_get_timezone</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_timezone                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *tzid</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> **zone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Retrieves a timezone object from the calendar backend.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tzid</parameter>&#160;:</term>
<listitem><simpara>ID of the timezone to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>zone</parameter>&#160;:</term>
<listitem><simpara>Return value for the timezone.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-add-timezone" role="function">
<title>e_cal_add_timezone ()</title>
<indexterm zone="e-cal-add-timezone"><primary>e_cal_add_timezone</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_add_timezone                  (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> *izone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Add a VTIMEZONE object to the given calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>izone</parameter>&#160;:</term>
<listitem><simpara>The timezone to add.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-default-timezone" role="function">
<title>e_cal_set_default_timezone ()</title>
<indexterm zone="e-cal-set-default-timezone"><primary>e_cal_set_default_timezone</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_set_default_timezone          (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icaltimezone"><type>icaltimezone</type></link> *zone</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Sets the default timezone on the calendar. This should be called before opening
the calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>zone</parameter>&#160;:</term>
<listitem><simpara>A timezone object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-query" role="function">
<title>e_cal_get_query ()</title>
<indexterm zone="e-cal-get-query"><primary>e_cal_get_query</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_query                     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *sexp</parameter>,
                                                         <parameter><link linkend="ECalView"><type>ECalView</type></link> **query</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Creates a live query object from a loaded calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sexp</parameter>&#160;:</term>
<listitem><simpara>S-expression representing the query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&#160;:</term>
<listitem><simpara>Return value for the new query.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A query object that will emit notification signals as calendar
components are added and removed from the query in the server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-resolve-tzid-cb" role="function">
<title>e_cal_resolve_tzid_cb ()</title>
<indexterm zone="e-cal-resolve-tzid-cb"><primary>e_cal_resolve_tzid_cb</primary></indexterm>
<programlisting><link linkend="icaltimezone"><returnvalue>icaltimezone</returnvalue></link> *      e_cal_resolve_tzid_cb               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *tzid</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
Resolves TZIDs for the recurrence generator.</para>
<variablelist role="params">
<varlistentry><term><parameter>tzid</parameter>&#160;:</term>
<listitem><simpara>ID of the timezone to resolve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>Closure data for the callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The timezone identified by the <parameter>tzid</parameter> argument, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
it could not be found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-component-as-string" role="function">
<title>e_cal_get_component_as_string ()</title>
<indexterm zone="e-cal-get-component-as-string"><primary>e_cal_get_component_as_string</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_cal_get_component_as_string       (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="icalcomponent"><type>icalcomponent</type></link> *icalcomp</parameter>);</programlisting>
<para>
Gets a calendar component as an iCalendar string, with a toplevel
VCALENDAR component and all VTIMEZONEs needed for the component.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icalcomp</parameter>&#160;:</term>
<listitem><simpara>A calendar component object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the component as a complete iCalendar string, or NULL on
failure. The string should be freed after use.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-error-message" role="function">
<title>e_cal_get_error_message ()</title>
<indexterm zone="e-cal-get-error-message"><primary>e_cal_get_error_message</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_cal_get_error_message             (<parameter><link linkend="ECalendarStatus"><type>ECalendarStatus</type></link> status</parameter>);</programlisting>
<para>
Gets an error message for the given status code.</para>
<variablelist role="params">
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>A status code.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the error message.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-open-default" role="function">
<title>e_cal_open_default ()</title>
<indexterm zone="e-cal-open-default"><primary>e_cal_open_default</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_open_default                  (<parameter><link linkend="ECal"><type>ECal</type></link> **ecal</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="ECalAuthFunc"><type>ECalAuthFunc</type></link> func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Opens the default calendar.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>Type of the calendar.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>Authentication function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>Closure data for the authentication function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if it opened correctly, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-default" role="function">
<title>e_cal_set_default ()</title>
<indexterm zone="e-cal-set-default"><primary>e_cal_set_default</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_set_default                   (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Sets a calendar as the default one.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-set-default-source" role="function">
<title>e_cal_set_default_source ()</title>
<indexterm zone="e-cal-set-default-source"><primary>e_cal_set_default_source</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_set_default_source            (<parameter><link linkend="ESource"><type>ESource</type></link> *source</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Sets the default source for the specified <parameter>type</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>source</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="ESource"><type>ESource</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>Type of the source.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-sources" role="function">
<title>e_cal_get_sources ()</title>
<indexterm zone="e-cal-get-sources"><primary>e_cal_get_sources</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_sources                   (<parameter><link linkend="ESourceList"><type>ESourceList</type></link> **sources</parameter>,
                                                         <parameter><link linkend="ECalSourceType"><type>ECalSourceType</type></link> type</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Gets the list of sources defined in the configuration for the given <parameter>type</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>sources</parameter>&#160;:</term>
<listitem><simpara>Return value for list of sources.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>Type of the sources to get.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the operation was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-local-attachment-store" role="function">
<title>e_cal_get_local_attachment_store ()</title>
<indexterm zone="e-cal-get-local-attachment-store"><primary>e_cal_get_local_attachment_store</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_cal_get_local_attachment_store    (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Queries the URL where the calendar attachments are
serialized in the local filesystem. This enable clients
to operate with the reference to attachments rather than the data itself
unless it specifically uses the attachments for open/sending
operations.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The URL where the attachments are serialized in the
local filesystem.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-recurrences-no-master" role="function">
<title>e_cal_get_recurrences_no_master ()</title>
<indexterm zone="e-cal-get-recurrences-no-master"><primary>e_cal_get_recurrences_no_master</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_recurrences_no_master     (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>);</programlisting>
<para>
Checks if the calendar has a master object for recurrences.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the calendar has a master object for recurrences,
FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-cal-get-attachments-for-comp" role="function">
<title>e_cal_get_attachments_for_comp ()</title>
<indexterm zone="e-cal-get-attachments-for-comp"><primary>e_cal_get_attachments_for_comp</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            e_cal_get_attachments_for_comp      (<parameter><link linkend="ECal"><type>ECal</type></link> *ecal</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *uid</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *rid</parameter>,
                                                         <parameter><link linkend="GSList"><type>GSList</type></link> **list</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Queries a calendar for a calendar component object based on its unique
identifier and gets the attachments for the component.</para>
<variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>A calendar client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&#160;:</term>
<listitem><simpara>Unique identifier for a calendar component.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rid</parameter>&#160;:</term>
<listitem><simpara>Recurrence identifier.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>Return the list of attachment uris.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>Placeholder for error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the call was successful, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="ECal.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="ECal-backend-died" role="signal"><title>The <literal>&quot;backend-died&quot;</literal> signal</title>
<indexterm zone="ECal-backend-died"><primary>ECal::backend-died</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="ECal"><type>ECal</type></link>    *ecal,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ECal-backend-error" role="signal"><title>The <literal>&quot;backend-error&quot;</literal> signal</title>
<indexterm zone="ECal-backend-error"><primary>ECal::backend-error</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="ECal"><type>ECal</type></link>    *ecal,
                                                        <link linkend="gchar"><type>gchar</type></link>   *arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ECal-cal-opened" role="signal"><title>The <literal>&quot;cal-opened&quot;</literal> signal</title>
<indexterm zone="ECal-cal-opened"><primary>ECal::cal-opened</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="ECal"><type>ECal</type></link>    *ecal,
                                                        <link linkend="gint"><type>gint</type></link>     arg1,
                                                        <link linkend="gpointer"><type>gpointer</type></link> user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="ECal-cal-set-mode" role="signal"><title>The <literal>&quot;cal-set-mode&quot;</literal> signal</title>
<indexterm zone="ECal-cal-set-mode"><primary>ECal::cal-set-mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                user_function                      (<link linkend="ECal"><type>ECal</type></link>                 *ecal,
                                                        <link linkend="ECalSetModeStatusEnum"><type>ECalSetModeStatusEnum</type></link> arg1,
                                                        <link linkend="CalModeEnum"><type>CalModeEnum</type></link>           arg2,
                                                        <link linkend="gpointer"><type>gpointer</type></link>              user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ecal</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>
<refsect1 id="ECal.see-also">
<title>See Also</title>
<para>
<link linkend="e-cal-listener"><type>e-cal-listener</type></link>, <link linkend="e-cal-view"><type>e-cal-view</type></link>
</para>
</refsect1>

</refentry>
