<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="EList">
<refmeta>
<refentrytitle role="top_of_page" id="EList.top_of_page">EList</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBEDATASERVER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>EList</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="EList.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>                    <link linkend="EList-struct">EList</link>;
<link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>            (<link linkend="EListCopyFunc">*EListCopyFunc</link>)                    (<parameter><link linkend="gconstpointer"><type>gconstpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> closure</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="EListFreeFunc">*EListFreeFunc</link>)                    (<parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> closure</parameter>);
<link linkend="EList"><returnvalue>EList</returnvalue></link> *             <link linkend="e-list-new">e_list_new</link>                          (<parameter><link linkend="EListCopyFunc"><type>EListCopyFunc</type></link> copy</parameter>,
                                                         <parameter><link linkend="EListFreeFunc"><type>EListFreeFunc</type></link> free</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *closure</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-construct">e_list_construct</link>                    (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EListCopyFunc"><type>EListCopyFunc</type></link> copy</parameter>,
                                                         <parameter><link linkend="EListFreeFunc"><type>EListFreeFunc</type></link> free</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *closure</parameter>);
<link linkend="EList"><returnvalue>EList</returnvalue></link> *             <link linkend="e-list-duplicate">e_list_duplicate</link>                    (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);
<link linkend="EIterator"><returnvalue>EIterator</returnvalue></link> *         <link linkend="e-list-get-iterator">e_list_get_iterator</link>                 (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-append">e_list_append</link>                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-remove">e_list_remove</link>                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="e-list-length">e_list_length</link>                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-remove-link">e_list_remove_link</link>                  (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> *link</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-remove-iterator">e_list_remove_iterator</link>              (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EIterator"><type>EIterator</type></link> *iterator</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-list-invalidate-iterators">e_list_invalidate_iterators</link>         (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EIterator"><type>EIterator</type></link> *skip</parameter>);
</synopsis>
</refsynopsisdiv>
<refsect1 id="EList.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----EList
         +----<link linkend="EAccountList">EAccountList</link>
</synopsis>
</refsect1>

<refsect1 id="EList.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="EList.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EList-struct" role="struct">
<title>EList</title>
<indexterm zone="EList-struct"><primary>EList</primary></indexterm>
<programlisting>typedef struct _EList EList;</programlisting>
<para>
</para></refsect2>
<refsect2 id="EListCopyFunc" role="function">
<title>EListCopyFunc ()</title>
<indexterm zone="EListCopyFunc"><primary>EListCopyFunc</primary></indexterm>
<programlisting><link linkend="gpointer"><returnvalue>gpointer</returnvalue></link>            (*EListCopyFunc)                    (<parameter><link linkend="gconstpointer"><type>gconstpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> closure</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EListFreeFunc" role="function">
<title>EListFreeFunc ()</title>
<indexterm zone="EListFreeFunc"><primary>EListFreeFunc</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*EListFreeFunc)                    (<parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> closure</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-new" role="function">
<title>e_list_new ()</title>
<indexterm zone="e-list-new"><primary>e_list_new</primary></indexterm>
<programlisting><link linkend="EList"><returnvalue>EList</returnvalue></link> *             e_list_new                          (<parameter><link linkend="EListCopyFunc"><type>EListCopyFunc</type></link> copy</parameter>,
                                                         <parameter><link linkend="EListFreeFunc"><type>EListFreeFunc</type></link> free</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *closure</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>copy</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-construct" role="function">
<title>e_list_construct ()</title>
<indexterm zone="e-list-construct"><primary>e_list_construct</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_construct                    (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EListCopyFunc"><type>EListCopyFunc</type></link> copy</parameter>,
                                                         <parameter><link linkend="EListFreeFunc"><type>EListFreeFunc</type></link> free</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *closure</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>copy</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-duplicate" role="function">
<title>e_list_duplicate ()</title>
<indexterm zone="e-list-duplicate"><primary>e_list_duplicate</primary></indexterm>
<programlisting><link linkend="EList"><returnvalue>EList</returnvalue></link> *             e_list_duplicate                    (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-get-iterator" role="function">
<title>e_list_get_iterator ()</title>
<indexterm zone="e-list-get-iterator"><primary>e_list_get_iterator</primary></indexterm>
<programlisting><link linkend="EIterator"><returnvalue>EIterator</returnvalue></link> *         e_list_get_iterator                 (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-append" role="function">
<title>e_list_append ()</title>
<indexterm zone="e-list-append"><primary>e_list_append</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_append                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-remove" role="function">
<title>e_list_remove ()</title>
<indexterm zone="e-list-remove"><primary>e_list_remove</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_remove                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-length" role="function">
<title>e_list_length ()</title>
<indexterm zone="e-list-length"><primary>e_list_length</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                e_list_length                       (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-remove-link" role="function">
<title>e_list_remove_link ()</title>
<indexterm zone="e-list-remove-link"><primary>e_list_remove_link</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_remove_link                  (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="GList"><type>GList</type></link> *link</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>link</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-remove-iterator" role="function">
<title>e_list_remove_iterator ()</title>
<indexterm zone="e-list-remove-iterator"><primary>e_list_remove_iterator</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_remove_iterator              (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EIterator"><type>EIterator</type></link> *iterator</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iterator</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-list-invalidate-iterators" role="function">
<title>e_list_invalidate_iterators ()</title>
<indexterm zone="e-list-invalidate-iterators"><primary>e_list_invalidate_iterators</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_list_invalidate_iterators         (<parameter><link linkend="EList"><type>EList</type></link> *list</parameter>,
                                                         <parameter><link linkend="EIterator"><type>EIterator</type></link> *skip</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>skip</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
