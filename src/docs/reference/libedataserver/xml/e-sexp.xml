<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libedataserver-ESExp">
<refmeta>
<refentrytitle role="top_of_page" id="libedataserver-ESExp.top_of_page">ESExp</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBEDATASERVER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ESExp</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libedataserver-ESExp.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>                    <link linkend="ESExp">ESExp</link>;
                    <link linkend="ESExpSymbol">ESExpSymbol</link>;
                    <link linkend="ESExpResult">ESExpResult</link>;
                    <link linkend="ESExpTerm">ESExpTerm</link>;
<link linkend="ESExp"><returnvalue>ESExp</returnvalue></link> *             <link linkend="e-sexp-new">e_sexp_new</link>                          (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-ref">e_sexp_ref</link>                          (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-unref">e_sexp_unref</link>                        (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-add-function">e_sexp_add_function</link>                 (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpFunc"><type>ESExpFunc</type></link> *func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-add-ifunction">e_sexp_add_ifunction</link>                (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpIFunc"><type>ESExpIFunc</type></link> *func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-add-variable">e_sexp_add_variable</link>                 (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpTerm"><type>ESExpTerm</type></link> *value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-remove-symbol">e_sexp_remove_symbol</link>                (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="e-sexp-set-scope">e_sexp_set_scope</link>                    (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-input-text">e_sexp_input_text</link>                   (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *text</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> len</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-input-file">e_sexp_input_file</link>                   (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> fd</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="e-sexp-parse">e_sexp_parse</link>                        (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);
<link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       <link linkend="e-sexp-eval">e_sexp_eval</link>                         (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);
<link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       <link linkend="e-sexp-term-eval">e_sexp_term_eval</link>                    (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><type>struct _ESExpTerm</type> *t</parameter>);
<link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       <link linkend="e-sexp-result-new">e_sexp_result_new</link>                   (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> type</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-result-free">e_sexp_result_free</link>                  (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><type>struct _ESExpResult</type> *t</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-resultv-free">e_sexp_resultv_free</link>                 (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> argc</parameter>,
                                                         <parameter><type>struct _ESExpResult</type> **argv</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-encode-bool">e_sexp_encode_bool</link>                  (<parameter><link linkend="GString"><type>GString</type></link> *s</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> state</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-encode-string">e_sexp_encode_string</link>                (<parameter><link linkend="GString"><type>GString</type></link> *s</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-sexp-fatal-error">e_sexp_fatal_error</link>                  (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *why</parameter>,
                                                         <parameter>...</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-sexp-error">e_sexp_error</link>                        (<parameter><type>struct _ESExp</type> *f</parameter>);
<link linkend="ESExpTerm"><returnvalue>ESExpTerm</returnvalue></link> *         <link linkend="e-sexp-parse-value">e_sexp_parse_value</link>                  (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libedataserver-ESExp.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="libedataserver-ESExp.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="ESExp" role="struct">
<title>ESExp</title>
<indexterm zone="ESExp"><primary>ESExp</primary></indexterm>
<programlisting>typedef struct {
#ifdef E_SEXP_IS_G_OBJECT
	GObject parent_object;
#else
	gint refcount;
#endif
	GScanner *scanner;&#160;/* for parsing text version */
	ESExpTerm *tree;&#160;/* root of expression tree */

	/* private stuff */
	jmp_buf failenv;
	gchar *error;
	GSList *operators;

	/* TODO: may also need a pool allocator for term strings, so we dont lose them
	   in error conditions? */
	struct _EMemChunk *term_chunks;
	struct _EMemChunk *result_chunks;
} ESExp;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ESExpSymbol" role="struct">
<title>ESExpSymbol</title>
<indexterm zone="ESExpSymbol"><primary>ESExpSymbol</primary></indexterm>
<programlisting>typedef struct {
	gint type;		/* ESEXP_TERM_FUNC or ESEXP_TERM_VAR */
	gchar *name;
	gpointer data;
	union {
		ESExpFunc *func;
		ESExpIFunc *ifunc;
	} f;
} ESExpSymbol;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ESExpResult" role="struct">
<title>ESExpResult</title>
<indexterm zone="ESExpResult"><primary>ESExpResult</primary></indexterm>
<programlisting>typedef struct {
	enum _ESExpResultType type;
	union {
		GPtrArray *ptrarray;
		gint number;
		gchar *string;
		gint bool;
		time_t time;
	} value;
} ESExpResult;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ESExpTerm" role="struct">
<title>ESExpTerm</title>
<indexterm zone="ESExpTerm"><primary>ESExpTerm</primary></indexterm>
<programlisting>typedef struct {
	enum _ESExpTermType type;
	union {
		gchar *string;
		gint number;
		gint bool;
		time_t time;
		struct {
			struct _ESExpSymbol *sym;
			struct _ESExpTerm **terms;
			gint termcount;
		} func;
		struct _ESExpSymbol *var;
	} value;
} ESExpTerm;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="e-sexp-new" role="function">
<title>e_sexp_new ()</title>
<indexterm zone="e-sexp-new"><primary>e_sexp_new</primary></indexterm>
<programlisting><link linkend="ESExp"><returnvalue>ESExp</returnvalue></link> *             e_sexp_new                          (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-ref" role="function">
<title>e_sexp_ref ()</title>
<indexterm zone="e-sexp-ref"><primary>e_sexp_ref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_ref                          (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-unref" role="function">
<title>e_sexp_unref ()</title>
<indexterm zone="e-sexp-unref"><primary>e_sexp_unref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_unref                        (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-add-function" role="function">
<title>e_sexp_add_function ()</title>
<indexterm zone="e-sexp-add-function"><primary>e_sexp_add_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_add_function                 (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpFunc"><type>ESExpFunc</type></link> *func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-add-ifunction" role="function">
<title>e_sexp_add_ifunction ()</title>
<indexterm zone="e-sexp-add-ifunction"><primary>e_sexp_add_ifunction</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_add_ifunction                (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpIFunc"><type>ESExpIFunc</type></link> *func</parameter>,
                                                         <parameter><link linkend="gpointer"><type>gpointer</type></link> data</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-add-variable" role="function">
<title>e_sexp_add_variable ()</title>
<indexterm zone="e-sexp-add-variable"><primary>e_sexp_add_variable</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_add_variable                 (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *name</parameter>,
                                                         <parameter><link linkend="ESExpTerm"><type>ESExpTerm</type></link> *value</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-remove-symbol" role="function">
<title>e_sexp_remove_symbol ()</title>
<indexterm zone="e-sexp-remove-symbol"><primary>e_sexp_remove_symbol</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_remove_symbol                (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-set-scope" role="function">
<title>e_sexp_set_scope ()</title>
<indexterm zone="e-sexp-set-scope"><primary>e_sexp_set_scope</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                e_sexp_set_scope                    (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> scope</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scope</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-input-text" role="function">
<title>e_sexp_input_text ()</title>
<indexterm zone="e-sexp-input-text"><primary>e_sexp_input_text</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_input_text                   (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *text</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-input-file" role="function">
<title>e_sexp_input_file ()</title>
<indexterm zone="e-sexp-input-file"><primary>e_sexp_input_file</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_input_file                   (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> fd</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fd</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-parse" role="function">
<title>e_sexp_parse ()</title>
<indexterm zone="e-sexp-parse"><primary>e_sexp_parse</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                e_sexp_parse                        (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-eval" role="function">
<title>e_sexp_eval ()</title>
<indexterm zone="e-sexp-eval"><primary>e_sexp_eval</primary></indexterm>
<programlisting><link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       e_sexp_eval                         (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-term-eval" role="function">
<title>e_sexp_term_eval ()</title>
<indexterm zone="e-sexp-term-eval"><primary>e_sexp_term_eval</primary></indexterm>
<programlisting><link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       e_sexp_term_eval                    (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><type>struct _ESExpTerm</type> *t</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-result-new" role="function">
<title>e_sexp_result_new ()</title>
<indexterm zone="e-sexp-result-new"><primary>e_sexp_result_new</primary></indexterm>
<programlisting><link linkend="ESExpResult"><returnvalue>ESExpResult</returnvalue></link> *       e_sexp_result_new                   (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> type</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-result-free" role="function">
<title>e_sexp_result_free ()</title>
<indexterm zone="e-sexp-result-free"><primary>e_sexp_result_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_result_free                  (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><type>struct _ESExpResult</type> *t</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-resultv-free" role="function">
<title>e_sexp_resultv_free ()</title>
<indexterm zone="e-sexp-resultv-free"><primary>e_sexp_resultv_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_resultv_free                 (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> argc</parameter>,
                                                         <parameter><type>struct _ESExpResult</type> **argv</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argc</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>argv</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-encode-bool" role="function">
<title>e_sexp_encode_bool ()</title>
<indexterm zone="e-sexp-encode-bool"><primary>e_sexp_encode_bool</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_encode_bool                  (<parameter><link linkend="GString"><type>GString</type></link> *s</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> state</parameter>);</programlisting>
<para>
Encode a bool into an s-expression <parameter>s</parameter>.  Bools are
encoded using #t #f syntax.</para>
</refsect2>
<refsect2 id="e-sexp-encode-string" role="function">
<title>e_sexp_encode_string ()</title>
<indexterm zone="e-sexp-encode-string"><primary>e_sexp_encode_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_encode_string                (<parameter><link linkend="GString"><type>GString</type></link> *s</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);</programlisting>
<para>
Add a c string <parameter>string</parameter> to the s-expression stored in
the gstring <parameter>s</parameter>.  Quotes are added, and special characters
are escaped appropriately.</para>
<variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>Destination string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara>String expression.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-fatal-error" role="function">
<title>e_sexp_fatal_error ()</title>
<indexterm zone="e-sexp-fatal-error"><primary>e_sexp_fatal_error</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_sexp_fatal_error                  (<parameter><type>struct _ESExp</type> *f</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *why</parameter>,
                                                         <parameter>...</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>why</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-error" role="function">
<title>e_sexp_error ()</title>
<indexterm zone="e-sexp-error"><primary>e_sexp_error</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_sexp_error                        (<parameter><type>struct _ESExp</type> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-sexp-parse-value" role="function">
<title>e_sexp_parse_value ()</title>
<indexterm zone="e-sexp-parse-value"><primary>e_sexp_parse_value</primary></indexterm>
<programlisting><link linkend="ESExpTerm"><returnvalue>ESExpTerm</returnvalue></link> *         e_sexp_parse_value                  (<parameter><link linkend="ESExp"><type>ESExp</type></link> *f</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
