<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libedataserver-e-util">
<refmeta>
<refentrytitle role="top_of_page" id="libedataserver-e-util.top_of_page">Utility Functions</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBEDATASERVER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Utility Functions</refname>
<refpurpose>Miscellaneous utility functions for evolution-data-server.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libedataserver-e-util.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>struct              <link linkend="tm">tm</link>;
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="e-util-mkdir-hier">e_util_mkdir_hier</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                                         <parameter><link linkend="mode-t"><type>mode_t</type></link> mode</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-util-strstrcase">e_util_strstrcase</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-util-unicode-get-utf8">e_util_unicode_get_utf8</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *text</parameter>,
                                                         <parameter><link linkend="gunichar"><type>gunichar</type></link> *out</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-util-utf8-strstrcase">e_util_utf8_strstrcase</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-util-utf8-strstrcasedecomp">e_util_utf8_strstrcasedecomp</link>        (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="e-util-utf8-strcasecmp">e_util_utf8_strcasecmp</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *s1</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *s2</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-util-utf8-remove-accents">e_util_utf8_remove_accents</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *str</parameter>);
<link linkend="guint64"><returnvalue>guint64</returnvalue></link>             <link linkend="e-util-pthread-id">e_util_pthread_id</link>                   (<parameter><link linkend="pthread-t"><type>pthread_t</type></link> t</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-filename-make-safe">e_filename_make_safe</link>                (<parameter><link linkend="gchar"><type>gchar</type></link> *string</parameter>);
<link linkend="gsize"><returnvalue>gsize</returnvalue></link>               <link linkend="e-utf8-strftime">e_utf8_strftime</link>                     (<parameter><link linkend="gchar"><type>gchar</type></link> *s</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> max</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *fmt</parameter>,
                                                         <parameter>const <type>struct tm</type> *tm</parameter>);
<link linkend="gsize"><returnvalue>gsize</returnvalue></link>               <link linkend="e-strftime">e_strftime</link>                          (<parameter><link linkend="gchar"><type>gchar</type></link> *s</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> max</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *fmt</parameter>,
                                                         <parameter>const <type>struct tm</type> *tm</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-util-get-prefix">e_util_get_prefix</link>                   (<parameter><type>void</type></parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-util-get-cp-prefix">e_util_get_cp_prefix</link>                (<parameter><type>void</type></parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="e-util-get-localedir">e_util_get_localedir</link>                (<parameter><type>void</type></parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-util-replace-prefix">e_util_replace_prefix</link>               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *configure_time_prefix</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *runtime_prefix</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *configure_time_path</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libedataserver-e-util.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="libedataserver-e-util.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="tm" role="struct">
<title>struct tm</title>
<indexterm zone="tm"><primary>tm</primary></indexterm>
<programlisting>struct tm;</programlisting>
<para>
</para></refsect2>
<refsect2 id="e-util-mkdir-hier" role="function" condition="deprecated:">
<title>e_util_mkdir_hier ()</title>
<indexterm zone="e-util-mkdir-hier" role="deprecated"><primary>e_util_mkdir_hier</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                e_util_mkdir_hier                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>,
                                                         <parameter><link linkend="mode-t"><type>mode_t</type></link> mode</parameter>);</programlisting>
<warning><para><literal>e_util_mkdir_hier</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Creates a directory hierarchy based on the string <parameter>path</parameter>. If <parameter>path</parameter>
is an absolute path, the directories will be created relative to
the root of the file system; otherwise, the directories will be
created relative to the current directory.</para>
<variablelist role="params">
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>The directory hierarchy to create.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>The permissions to use for the directories.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success; -1 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-strstrcase" role="function">
<title>e_util_strstrcase ()</title>
<indexterm zone="e-util-strstrcase"><primary>e_util_strstrcase</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_util_strstrcase                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);</programlisting>
<para>
Find the first instance of <parameter>needle</parameter> in <parameter>haystack</parameter>, ignoring case for
bytes that are ASCII characters.</para>
<variablelist role="params">
<varlistentry><term><parameter>haystack</parameter>&#160;:</term>
<listitem><simpara>The string to search in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needle</parameter>&#160;:</term>
<listitem><simpara>The string to search for.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the start of <parameter>needle</parameter> in <parameter>haystack</parameter>, or NULL if
         <parameter>needle</parameter> is not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-unicode-get-utf8" role="function">
<title>e_util_unicode_get_utf8 ()</title>
<indexterm zone="e-util-unicode-get-utf8"><primary>e_util_unicode_get_utf8</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_util_unicode_get_utf8             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *text</parameter>,
                                                         <parameter><link linkend="gunichar"><type>gunichar</type></link> *out</parameter>);</programlisting>
<para>
Get a UTF-8 character from the beginning of <parameter>text</parameter>.</para>
<variablelist role="params">
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara>The string to take the UTF-8 character from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>The location to store the UTF-8 character in.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the next character in <parameter>text</parameter> after <parameter>out</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-utf8-strstrcase" role="function">
<title>e_util_utf8_strstrcase ()</title>
<indexterm zone="e-util-utf8-strstrcase"><primary>e_util_utf8_strstrcase</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_util_utf8_strstrcase              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);</programlisting>
<para>
Find the first instance of <parameter>needle</parameter> in <parameter>haystack</parameter>, ignoring case. (No
proper case folding or decomposing is done.) Both <parameter>needle</parameter> and
<parameter>haystack</parameter> are UTF-8 strings.</para>
<variablelist role="params">
<varlistentry><term><parameter>haystack</parameter>&#160;:</term>
<listitem><simpara>The string to search in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needle</parameter>&#160;:</term>
<listitem><simpara>The string to search for.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first instance of <parameter>needle</parameter> in <parameter>haystack</parameter>, or
         <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no match is found, or if either of the strings are
         not legal UTF-8 strings.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-utf8-strstrcasedecomp" role="function">
<title>e_util_utf8_strstrcasedecomp ()</title>
<indexterm zone="e-util-utf8-strstrcasedecomp"><primary>e_util_utf8_strstrcasedecomp</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_util_utf8_strstrcasedecomp        (<parameter>const <link linkend="gchar"><type>gchar</type></link> *haystack</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *needle</parameter>);</programlisting>
<para>
Find the first instance of <parameter>needle</parameter> in <parameter>haystack</parameter>, where both <parameter>needle</parameter>
and <parameter>haystack</parameter> are UTF-8 strings. Both strings are stripped and
decomposed for comparison, and case is ignored.</para>
<variablelist role="params">
<varlistentry><term><parameter>haystack</parameter>&#160;:</term>
<listitem><simpara>The string to search in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>needle</parameter>&#160;:</term>
<listitem><simpara>The string to search for.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A pointer to the first instance of <parameter>needle</parameter> in <parameter>haystack</parameter>, or
         <link linkend="NULL:CAPS"><literal>NULL</literal></link> if either of the strings are not legal UTF-8 strings.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-utf8-strcasecmp" role="function">
<title>e_util_utf8_strcasecmp ()</title>
<indexterm zone="e-util-utf8-strcasecmp"><primary>e_util_utf8_strcasecmp</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                e_util_utf8_strcasecmp              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *s1</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *s2</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>s1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-utf8-remove-accents" role="function">
<title>e_util_utf8_remove_accents ()</title>
<indexterm zone="e-util-utf8-remove-accents"><primary>e_util_utf8_remove_accents</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_util_utf8_remove_accents          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *str</parameter>);</programlisting>
<variablelist role="params">
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>newly allocates string, copy of 'str', without accents.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-pthread-id" role="function">
<title>e_util_pthread_id ()</title>
<indexterm zone="e-util-pthread-id"><primary>e_util_pthread_id</primary></indexterm>
<programlisting><link linkend="guint64"><returnvalue>guint64</returnvalue></link>             e_util_pthread_id                   (<parameter><link linkend="pthread-t"><type>pthread_t</type></link> t</parameter>);</programlisting>
<para>
Returns a 64-bit integer hopefully uniquely identifying the
thread. To be used in debugging output and logging only. To test
whether two pthread_t values refer to the same thread, use
<link linkend="pthread-equal"><function>pthread_equal()</function></link>.
</para>
<para>
There is no guarantee that calling <link linkend="e-util-pthread-id"><function>e_util_pthread_id()</function></link> on one
thread first and later after that thread has dies on another won't
return the same integer.
</para>
<para>
On some platforms it might even be that when called two times on
the same thread's pthread_t (with some pthread API calls inbetween)
we will return different values (this of course makes this function
rather useless on such platforms).
</para>
<para>
On Linux and Win32, known to really return a unique id for each
thread existing at a certain time. No guarantee that ids won't be
reused after a thread has terminated, though.</para>
<variablelist role="params">
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>A pthread_t value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A 64-bit integer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-filename-make-safe" role="function">
<title>e_filename_make_safe ()</title>
<indexterm zone="e-filename-make-safe"><primary>e_filename_make_safe</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_filename_make_safe                (<parameter><link linkend="gchar"><type>gchar</type></link> *string</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-utf8-strftime" role="function">
<title>e_utf8_strftime ()</title>
<indexterm zone="e-utf8-strftime"><primary>e_utf8_strftime</primary></indexterm>
<programlisting><link linkend="gsize"><returnvalue>gsize</returnvalue></link>               e_utf8_strftime                     (<parameter><link linkend="gchar"><type>gchar</type></link> *s</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> max</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *fmt</parameter>,
                                                         <parameter>const <type>struct tm</type> *tm</parameter>);</programlisting>
<para>
The UTF-8 equivalent of <link linkend="e-strftime"><function>e_strftime()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The string array to store the result in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max</parameter>&#160;:</term>
<listitem><simpara>The size of array <parameter>s</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fmt</parameter>&#160;:</term>
<listitem><simpara>The formatting to use on <parameter>tm</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tm</parameter>&#160;:</term>
<listitem><simpara>The time value to format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of characters placed in <parameter>s</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-strftime" role="function">
<title>e_strftime ()</title>
<indexterm zone="e-strftime"><primary>e_strftime</primary></indexterm>
<programlisting><link linkend="gsize"><returnvalue>gsize</returnvalue></link>               e_strftime                          (<parameter><link linkend="gchar"><type>gchar</type></link> *s</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> max</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *fmt</parameter>,
                                                         <parameter>const <type>struct tm</type> *tm</parameter>);</programlisting>
<para>
This function is a wrapper around the strftime(3) function, which
converts the &amp;percnt;l and &amp;percnt;k (12h and 24h) format variables if necessary.</para>
<variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The string array to store the result in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max</parameter>&#160;:</term>
<listitem><simpara>The size of array <parameter>s</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fmt</parameter>&#160;:</term>
<listitem><simpara>The formatting to use on <parameter>tm</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tm</parameter>&#160;:</term>
<listitem><simpara>The time value to format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of characters placed in <parameter>s</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-get-prefix" role="function">
<title>e_util_get_prefix ()</title>
<indexterm zone="e-util-get-prefix"><primary>e_util_get_prefix</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_util_get_prefix                   (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-get-cp-prefix" role="function">
<title>e_util_get_cp_prefix ()</title>
<indexterm zone="e-util-get-cp-prefix"><primary>e_util_get_cp_prefix</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_util_get_cp_prefix                (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-get-localedir" role="function">
<title>e_util_get_localedir ()</title>
<indexterm zone="e-util-get-localedir"><primary>e_util_get_localedir</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       e_util_get_localedir                (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-util-replace-prefix" role="function">
<title>e_util_replace_prefix ()</title>
<indexterm zone="e-util-replace-prefix"><primary>e_util_replace_prefix</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_util_replace_prefix               (<parameter>const <link linkend="gchar"><type>gchar</type></link> *configure_time_prefix</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *runtime_prefix</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *configure_time_path</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>configure_time_prefix</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>runtime_prefix</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>configure_time_path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
