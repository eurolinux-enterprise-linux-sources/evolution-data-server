<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libedataserverui-e-passwords">
<refmeta>
<refentrytitle role="top_of_page" id="libedataserverui-e-passwords.top_of_page">e-passwords</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBEDATASERVERUI Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>e-passwords</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libedataserverui-e-passwords.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis><link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-init">e_passwords_init</link>                    (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-shutdown">e_passwords_shutdown</link>                (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-cancel">e_passwords_cancel</link>                  (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-set-online">e_passwords_set_online</link>              (<parameter><link linkend="gint"><type>gint</type></link> state</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-remember-password">e_passwords_remember_password</link>       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-add-password">e_passwords_add_password</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *passwd</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-passwords-get-password">e_passwords_get_password</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-forget-password">e_passwords_forget_password</link>         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-forget-passwords">e_passwords_forget_passwords</link>        (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="e-passwords-clear-passwords">e_passwords_clear_passwords</link>         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>);
enum                <link linkend="EPasswordsRememberType">EPasswordsRememberType</link>;
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="e-passwords-ask-password">e_passwords_ask_password</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *component_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *prompt</parameter>,
                                                         <parameter><link linkend="EPasswordsRememberType"><type>EPasswordsRememberType</type></link> remember_type</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> *remember</parameter>,
                                                         <parameter><link linkend="GtkWindow"><type>GtkWindow</type></link> *parent</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libedataserverui-e-passwords.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="libedataserverui-e-passwords.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="e-passwords-init" role="function">
<title>e_passwords_init ()</title>
<indexterm zone="e-passwords-init"><primary>e_passwords_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_init                    (<parameter><type>void</type></parameter>);</programlisting>
<para>
Initializes the e_passwords routines. Must be called before any other
e_passwords_* function.</para>
</refsect2>
<refsect2 id="e-passwords-shutdown" role="function">
<title>e_passwords_shutdown ()</title>
<indexterm zone="e-passwords-shutdown"><primary>e_passwords_shutdown</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_shutdown                (<parameter><type>void</type></parameter>);</programlisting>
<para>
Cleanup routine to call before exiting.</para>
</refsect2>
<refsect2 id="e-passwords-cancel" role="function">
<title>e_passwords_cancel ()</title>
<indexterm zone="e-passwords-cancel"><primary>e_passwords_cancel</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_cancel                  (<parameter><type>void</type></parameter>);</programlisting>
<para>
Cancel any outstanding password operations and close any dialogues
currently being shown.</para>
</refsect2>
<refsect2 id="e-passwords-set-online" role="function">
<title>e_passwords_set_online ()</title>
<indexterm zone="e-passwords-set-online"><primary>e_passwords_set_online</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_set_online              (<parameter><link linkend="gint"><type>gint</type></link> state</parameter>);</programlisting>
<para>
Set the offline-state of the application.  This is a work-around
for having the backends fully offline aware, and returns a
cancellation response instead of prompting for passwords.
</para>
<para>
FIXME: This is not a permanent api, review post 2.0.</para>
</refsect2>
<refsect2 id="e-passwords-remember-password" role="function">
<title>e_passwords_remember_password ()</title>
<indexterm zone="e-passwords-remember-password"><primary>e_passwords_remember_password</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_remember_password       (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>
Saves the password associated with <parameter>key</parameter> to disk.</para>
<variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-passwords-add-password" role="function">
<title>e_passwords_add_password ()</title>
<indexterm zone="e-passwords-add-password"><primary>e_passwords_add_password</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_add_password            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *passwd</parameter>);</programlisting>
<para>
This stores the <parameter>key</parameter>/<parameter>passwd</parameter> pair in the current session's password
hash.</para>
<variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>passwd</parameter>&#160;:</term>
<listitem><simpara>the password for <parameter>key</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-passwords-get-password" role="function">
<title>e_passwords_get_password ()</title>
<indexterm zone="e-passwords-get-password"><primary>e_passwords_get_password</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_passwords_get_password            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the password associated with <parameter>key</parameter>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.  Caller
must free the returned password.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-passwords-forget-password" role="function">
<title>e_passwords_forget_password ()</title>
<indexterm zone="e-passwords-forget-password"><primary>e_passwords_forget_password</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_forget_password         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>);</programlisting>
<para>
Forgets the password associated with <parameter>key</parameter>, in memory and on disk.</para>
<variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="e-passwords-forget-passwords" role="function">
<title>e_passwords_forget_passwords ()</title>
<indexterm zone="e-passwords-forget-passwords"><primary>e_passwords_forget_passwords</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_forget_passwords        (<parameter><type>void</type></parameter>);</programlisting>
<para>
Forgets all cached passwords, in memory and on disk.</para>
</refsect2>
<refsect2 id="e-passwords-clear-passwords" role="function">
<title>e_passwords_clear_passwords ()</title>
<indexterm zone="e-passwords-clear-passwords"><primary>e_passwords_clear_passwords</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                e_passwords_clear_passwords         (<parameter>const <link linkend="gchar"><type>gchar</type></link> *component</parameter>);</programlisting>
<para>
Forgets all disk cached passwords for the component.</para>
<variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EPasswordsRememberType" role="enum">
<title>enum EPasswordsRememberType</title>
<indexterm zone="EPasswordsRememberType"><primary>EPasswordsRememberType</primary></indexterm>
<programlisting>typedef enum {
	E_PASSWORDS_REMEMBER_NEVER,
	E_PASSWORDS_REMEMBER_SESSION,
	E_PASSWORDS_REMEMBER_FOREVER,
	E_PASSWORDS_REMEMBER_MASK = 0xf,

	/* option bits */
	E_PASSWORDS_SECRET = 1&lt;&lt;8,
	E_PASSWORDS_REPROMPT = 1&lt;&lt;9,
	E_PASSWORDS_ONLINE = 1&lt;&lt;10, /* only ask if we're online */
	E_PASSWORDS_DISABLE_REMEMBER = 1&lt;&lt;11, /* disable the 'remember password' checkbox */
	E_PASSWORDS_PASSPHRASE = 1&lt;&lt;12 /* We are asking a passphrase */
} EPasswordsRememberType;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="e-passwords-ask-password" role="function">
<title>e_passwords_ask_password ()</title>
<indexterm zone="e-passwords-ask-password"><primary>e_passwords_ask_password</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             e_passwords_ask_password            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *title</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *component_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *prompt</parameter>,
                                                         <parameter><link linkend="EPasswordsRememberType"><type>EPasswordsRememberType</type></link> remember_type</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> *remember</parameter>,
                                                         <parameter><link linkend="GtkWindow"><type>GtkWindow</type></link> *parent</parameter>);</programlisting>
<para>
Asks the user for a password.</para>
<variablelist role="params">
<varlistentry><term><parameter>title</parameter>&#160;:</term>
<listitem><simpara>title for the password dialog
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component_name</parameter>&#160;:</term>
<listitem><simpara>the name of the component for which we're storing
the password (e.g. Mail, Addressbook, etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>key to store the password under
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prompt</parameter>&#160;:</term>
<listitem><simpara>prompt string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remember_type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remember</parameter>&#160;:</term>
<listitem><simpara>on input, the default state of the remember checkbox.
on output, the state of the checkbox when the dialog was closed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&#160;:</term>
<listitem><simpara>parent window of the dialog, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the password, which the caller must free, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
the user cancelled the operation. *<parameter>remember</parameter> will be set if the
return value is non-<link linkend="NULL:CAPS"><literal>NULL</literal></link> and <parameter>remember_type</parameter> is not
E_PASSWORDS_DO_NOT_REMEMBER.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
