Index: evolution-data-server-2.28.3/calendar/libedata-cal/e-data-cal-view.c
===================================================================
--- evolution-data-server-2.28.3/calendar/libedata-cal/e-data-cal-view.c	(revision 1)
+++ evolution-data-server-2.28.3/calendar/libedata-cal/e-data-cal-view.c	(working copy)
@@ -61,6 +61,7 @@ struct _EDataCalViewPrivate {
 
 static void e_data_cal_view_class_init (EDataCalViewClass *class);
 static void e_data_cal_view_init (EDataCalView *query, EDataCalViewClass *class);
+static void e_data_cal_view_dispose (GObject *object);
 static void e_data_cal_view_finalize (GObject *object);
 
 static BonoboObjectClass *parent_class;
@@ -243,6 +244,8 @@ impl_EDataCalView_start (PortableServer_
 	query = QUERY (bonobo_object_from_servant (servant));
 	priv = query->priv;
 
+	bonobo_object_ref (query);
+
 	if (priv->started) {
 		g_hash_table_foreach (priv->matched_objects, (GHFunc) notify_matched_object_cb, query);
 
@@ -274,6 +277,8 @@ impl_EDataCalView_start (PortableServer_
 			ld->notified_start = TRUE;
 		}
 	}
+
+	bonobo_object_unref (query);
 }
 
 static void
@@ -345,6 +350,7 @@ e_data_cal_view_class_init (EDataCalView
 
 	object_class->set_property = e_data_cal_view_set_property;
 	object_class->get_property = e_data_cal_view_get_property;
+	object_class->dispose = e_data_cal_view_dispose;
 	object_class->finalize = e_data_cal_view_finalize;
 
 	epv->start = impl_EDataCalView_start;
@@ -389,9 +395,8 @@ e_data_cal_view_init (EDataCalView *quer
 	priv->sexp = NULL;
 }
 
-/* Finalize handler for the live search query */
 static void
-e_data_cal_view_finalize (GObject *object)
+e_data_cal_view_dispose (GObject *object)
 {
 	EDataCalView *query;
 	EDataCalViewPrivate *priv;
@@ -402,8 +407,10 @@ e_data_cal_view_finalize (GObject *objec
 	query = QUERY (object);
 	priv = query->priv;
 
-	if (priv->backend)
+	if (priv->backend) {
 		g_object_unref (priv->backend);
+		priv->backend = NULL;
+	}
 
 	while (priv->listeners) {
 		ListenerData *ld = priv->listeners->data;
@@ -416,14 +423,37 @@ e_data_cal_view_finalize (GObject *objec
 		g_free (ld);
 	}
 
-	if (priv->matched_objects)
+	if (priv->matched_objects) {
 		g_hash_table_destroy (priv->matched_objects);
+		priv->matched_objects = NULL;
+	}
 
-	if (priv->sexp)
+	if (priv->sexp) {
 		g_object_unref (priv->sexp);
+		priv->sexp = NULL;
+	}
+
+	if (G_OBJECT_CLASS (parent_class)->dispose)
+		(* G_OBJECT_CLASS (parent_class)->dispose) (object);
+}
+
+/* Finalize handler for the live search query */
+static void
+e_data_cal_view_finalize (GObject *object)
+{
+	EDataCalView *query;
+	EDataCalViewPrivate *priv;
+
+	g_return_if_fail (object != NULL);
+	g_return_if_fail (IS_QUERY (object));
+
+	query = QUERY (object);
+	priv = query->priv;
 
 	g_free (priv);
 
+	query->priv = NULL;
+
 	if (G_OBJECT_CLASS (parent_class)->finalize)
 		(* G_OBJECT_CLASS (parent_class)->finalize) (object);
 }
@@ -665,6 +695,8 @@ e_data_cal_view_notify_objects_added (ED
 	if (num_objs <= 0)
 		return;
 
+	bonobo_object_ref (query);
+
 	obj_list._buffer = GNOME_Evolution_Calendar_stringlist_allocbuf (num_objs);
 	obj_list._maximum = num_objs;
 	obj_list._length = num_objs;
@@ -689,6 +721,7 @@ e_data_cal_view_notify_objects_added (ED
 	}
 
 	CORBA_free (obj_list._buffer);
+	bonobo_object_unref (query);
 }
 
 /**
@@ -743,6 +776,8 @@ e_data_cal_view_notify_objects_modified 
 	if (num_objs <= 0)
 		return;
 
+	bonobo_object_ref (query);
+
 	obj_list._buffer = GNOME_Evolution_Calendar_stringlist_allocbuf (num_objs);
 	obj_list._maximum = num_objs;
 	obj_list._length = num_objs;
@@ -767,6 +802,7 @@ e_data_cal_view_notify_objects_modified 
 	}
 
 	CORBA_free (obj_list._buffer);
+	bonobo_object_unref (query);
 }
 
 /**
@@ -821,6 +857,8 @@ e_data_cal_view_notify_objects_removed (
 	if (num_ids <= 0)
 		return;
 
+	bonobo_object_ref (query);
+
 	id_list._buffer = GNOME_Evolution_Calendar_CalObjIDSeq_allocbuf (num_ids);
 	id_list._maximum = num_ids;
 	id_list._length = num_ids;
@@ -854,6 +892,7 @@ e_data_cal_view_notify_objects_removed (
 	}
 
 	CORBA_free (id_list._buffer);
+	bonobo_object_unref (query);
 }
 
 /**
@@ -903,6 +942,8 @@ e_data_cal_view_notify_progress (EDataCa
 	priv = query->priv;
 	g_return_if_fail (priv->listeners != CORBA_OBJECT_NIL);
 
+	bonobo_object_ref (query);
+
 	for (l = priv->listeners; l != NULL; l = l->next) {
 		ListenerData *ld = l->data;
 
@@ -914,6 +955,8 @@ e_data_cal_view_notify_progress (EDataCa
 
 		CORBA_exception_free (&ev);
 	}
+
+	bonobo_object_unref (query);
 }
 
 /**
@@ -937,6 +980,8 @@ e_data_cal_view_notify_done (EDataCalVie
 	priv = query->priv;
 	g_return_if_fail (priv->listeners != CORBA_OBJECT_NIL);
 
+	bonobo_object_ref (query);
+
 	priv->done = TRUE;
 	priv->done_status = status;
 
@@ -951,4 +996,6 @@ e_data_cal_view_notify_done (EDataCalVie
 
 		CORBA_exception_free (&ev);
 	}
+
+	bonobo_object_unref (query);
 }
Index: evolution-data-server-2.28.3/calendar/libedata-cal/e-cal-backend-file-store.c
===================================================================
--- evolution-data-server-2.28.3/calendar/libedata-cal/e-cal-backend-file-store.c	(revision 1)
+++ evolution-data-server-2.28.3/calendar/libedata-cal/e-cal-backend-file-store.c	(working copy)
@@ -380,6 +380,8 @@ e_cal_backend_file_store_put_key_value (
 
 	if (e_file_cache_get_object (priv->keys_cache, key))
 		ret_val = e_file_cache_replace_object (priv->keys_cache, key, value);
+	else if (!value || !*value)
+		ret_val = e_file_cache_remove_object (priv->keys_cache, key);
 	else
 		ret_val = e_file_cache_add_object (priv->keys_cache, key, value);
 
Index: evolution-data-server-2.28.3/calendar/backends/http/e-cal-backend-http.c
===================================================================
--- evolution-data-server-2.28.3/calendar/backends/http/e-cal-backend-http.c	(revision 1)
+++ evolution-data-server-2.28.3/calendar/backends/http/e-cal-backend-http.c	(working copy)
@@ -274,9 +274,77 @@ empty_cache (ECalBackendHttp *cbhttp)
 	}
 	g_slist_free (comps);
 
+	e_cal_backend_store_put_key_value (priv->store, "ETag", NULL);
 	e_cal_backend_store_clean (priv->store);
 }
 
+static gboolean
+put_component_to_store (ECalBackendHttp *cb, ECalComponent *comp)
+{
+	ECalBackendHttpPrivate *priv;
+	ECalComponent *cache_comp;
+	const gchar *uid;
+	gchar *rid;
+
+	priv = cb->priv;
+
+	e_cal_component_get_uid (comp, &uid);
+	rid = e_cal_component_get_recurid_as_string (comp);
+	cache_comp = e_cal_backend_store_get_component (priv->store, uid, rid);
+	g_free (rid);
+
+	if (cache_comp) {
+		gboolean changed = TRUE;
+		struct icaltimetype stamp1, stamp2;
+
+		stamp1 = icaltime_null_time ();
+		stamp2 = icaltime_null_time ();
+
+		e_cal_component_get_dtstamp (comp, &stamp1);
+		e_cal_component_get_dtstamp (cache_comp, &stamp2);
+
+		changed = (icaltime_is_null_time (stamp1) && !icaltime_is_null_time (stamp2)) ||
+			  (!icaltime_is_null_time (stamp1) && icaltime_is_null_time (stamp2)) ||
+			  (icaltime_compare (stamp1, stamp2) != 0);
+
+		if (!changed) {
+			struct icaltimetype *last_modified1 = NULL, *last_modified2 = NULL;
+
+			e_cal_component_get_last_modified (comp, &last_modified1);
+			e_cal_component_get_last_modified (cache_comp, &last_modified2);
+
+			changed = (last_modified1 != NULL && last_modified2 == NULL) ||
+				  (last_modified1 == NULL && last_modified2 != NULL) ||
+				  (last_modified1 != NULL && last_modified2 != NULL && icaltime_compare (*last_modified1, *last_modified2) != 0);
+
+			if (last_modified1)
+				e_cal_component_free_icaltimetype (last_modified1);
+			if (last_modified2)
+				e_cal_component_free_icaltimetype (last_modified2);
+
+			if (!changed) {
+				gint *sequence1 = NULL, *sequence2 = NULL;
+
+				e_cal_component_get_sequence (comp, &sequence1);
+				e_cal_component_get_sequence (cache_comp, &sequence2);
+
+				changed = (sequence1 != NULL && sequence2 == NULL) ||
+					  (sequence1 == NULL && sequence2 != NULL) ||
+					  (sequence1 != NULL && sequence2 != NULL && *sequence1 != *sequence2);
+			}
+		}
+
+		g_object_unref (cache_comp);
+
+		if (!changed)
+			return FALSE;
+	}
+
+	e_cal_backend_store_put_component (priv->store, comp);
+
+	return TRUE;
+}
+
 static void
 retrieval_done (SoupSession *session, SoupMessage *msg, ECalBackendHttp *cbhttp)
 {
@@ -299,6 +367,12 @@ retrieval_done (SoupSession *session, So
 		return;
 	}
 
+	if (msg->status_code == SOUP_STATUS_NOT_MODIFIED) {
+		/* attempts with ETag can result in 304 status code */
+		priv->opened = TRUE;
+		return;
+	}
+
 	/* Handle redirection ourselves */
 	if (SOUP_STATUS_IS_REDIRECTION (msg->status_code)) {
 		newuri = soup_message_headers_get (msg->response_headers,
@@ -345,6 +419,15 @@ retrieval_done (SoupSession *session, So
 		return;
 	}
 
+	if (priv->store) {
+		const gchar *etag = soup_message_headers_get_one (msg->response_headers, "ETag");
+
+		if (!etag || !*etag)
+			etag = NULL;
+
+		e_cal_backend_store_put_key_value (priv->store, "ETag", etag);
+	}
+
 	/* get the calendar from the response */
 	icalcomp = icalparser_parse_string (msg->response_body->data);
 
@@ -397,24 +480,22 @@ retrieval_done (SoupSession *session, So
 		if (subcomp_kind == kind) {
 			comp = e_cal_component_new ();
 			if (e_cal_component_set_icalcomponent (comp, icalcomponent_new_clone (subcomp))) {
-				const gchar *uid, *orig_key, *orig_value;
+				const gchar *uid;
+				gpointer orig_key = NULL, orig_value = NULL;
 				gchar *obj;
 
-				e_cal_backend_store_put_component (priv->store, comp);
-
 				e_cal_component_get_uid (comp, &uid);
-				/* middle (gpointer) cast only because of 'dereferencing type-punned pointer will break strict-aliasing rules' */
-				if (g_hash_table_lookup_extended (old_cache, uid, (gpointer *)(gpointer)&orig_key, (gpointer *)(gpointer)&orig_value)) {
+
+				if (!put_component_to_store (cbhttp, comp)) {
+					g_hash_table_remove (old_cache, uid);
+				} else if (g_hash_table_lookup_extended (old_cache, uid, &orig_key, &orig_value)) {
 					obj = icalcomponent_as_ical_string_r (subcomp);
-					e_cal_backend_notify_object_modified (E_CAL_BACKEND (cbhttp),
-									      orig_value,
-									      obj);
+					e_cal_backend_notify_object_modified (E_CAL_BACKEND (cbhttp), (const gchar *) orig_value, obj);
 					g_free (obj);
 					g_hash_table_remove (old_cache, uid);
 				} else {
 					obj = icalcomponent_as_ical_string_r (subcomp);
-					e_cal_backend_notify_object_created (E_CAL_BACKEND (cbhttp),
-									     obj);
+					e_cal_backend_notify_object_created (E_CAL_BACKEND (cbhttp), obj);
 					g_free (obj);
 				}
 			}
@@ -442,6 +523,8 @@ retrieval_done (SoupSession *session, So
 	/* free memory */
 	icalcomponent_free (icalcomp);
 
+	priv->opened = TRUE;
+
 	d(g_message ("Retrieval really done.\n"));
 }
 
@@ -509,6 +592,14 @@ begin_retrieval_cb (ECalBackendHttp *cbh
 		g_signal_connect (priv->soup_session, "authenticate",
 				  G_CALLBACK (soup_authenticate), cbhttp);
 
+		if (g_getenv ("WEBCAL_DEBUG") != NULL) {
+			SoupLogger *logger;
+
+			logger = soup_logger_new (SOUP_LOGGER_LOG_BODY, 1024 * 1024);
+			soup_session_add_feature (priv->soup_session, SOUP_SESSION_FEATURE (logger));
+			g_object_unref (logger);
+		}
+
 		/* set the HTTP proxy, if configuration is set to do so */
 		proxy = e_proxy_new ();
 		e_proxy_setup_proxy (proxy);
@@ -529,10 +620,17 @@ begin_retrieval_cb (ECalBackendHttp *cbh
 		return FALSE;
 	}
 
-	soup_message_headers_append (soup_message->request_headers, "User-Agent",
-				     "Evolution/" VERSION);
+	soup_message_headers_append (soup_message->request_headers, "User-Agent", "Evolution/" VERSION);
+	soup_message_headers_append (soup_message->request_headers, "Connection", "close");
 	soup_message_set_flags (soup_message, SOUP_MESSAGE_NO_REDIRECT);
 
+	if (priv->store) {
+		const gchar *etag = e_cal_backend_store_get_key_value (priv->store, "ETag");
+
+		if (etag && *etag)
+			soup_message_headers_append (soup_message->request_headers, "If-None-Match", etag);
+	}
+
 	soup_session_queue_message (priv->soup_session, soup_message,
 				    (SoupSessionCallback) retrieval_done, cbhttp);
 
@@ -553,7 +651,6 @@ reload_cb (ECalBackendHttp *cbhttp)
 	d(g_message ("Reload!\n"));
 
 	priv->reload_timeout_id = 0;
-	priv->opened = TRUE;
 	begin_retrieval_cb (cbhttp);
 	return FALSE;
 }
@@ -627,6 +724,11 @@ e_cal_backend_http_open (ECalBackendSync
 
 	cbhttp = E_CAL_BACKEND_HTTP (backend);
 	priv = cbhttp->priv;
+
+	/* already opened, thus can skip all this initialization */
+	if (priv->opened)
+		return GNOME_Evolution_Calendar_Success;
+
 	source = e_cal_backend_get_source (E_CAL_BACKEND (backend));
 
 	if (priv->source_changed_id == 0) {
Index: evolution-data-server-2.28.3/calendar/libecal/e-cal-view.c
===================================================================
--- evolution-data-server-2.28.3/calendar/libecal/e-cal-view.c	(revision 1)
+++ evolution-data-server-2.28.3/calendar/libecal/e-cal-view.c	(working copy)
@@ -206,9 +206,8 @@ e_cal_view_get_property (GObject *object
 	}
 }
 
-/* Finalize handler for the calendar view */
 static void
-e_cal_view_finalize (GObject *object)
+e_cal_view_dispose (GObject *object)
 {
 	ECalView *view;
 	ECalViewPrivate *priv;
@@ -219,12 +218,34 @@ e_cal_view_finalize (GObject *object)
 	view = E_CAL_VIEW (object);
 	priv = view->priv;
 
-	/* The server keeps a copy of the view listener, so we must unref it */
-	g_signal_handlers_disconnect_matched (priv->listener, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, view);
-	bonobo_object_unref (BONOBO_OBJECT (priv->listener));
+	if (priv->listener) {
+		/* The server keeps a copy of the view listener, so we must unref it */
+		g_signal_handlers_disconnect_matched (priv->listener, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, view);
+		bonobo_object_unref (BONOBO_OBJECT (priv->listener));
+		priv->listener = NULL;
+	}
 
-	if (priv->view != CORBA_OBJECT_NIL)
+	if (priv->view != CORBA_OBJECT_NIL) {
 		bonobo_object_release_unref (priv->view, NULL);
+		priv->view = CORBA_OBJECT_NIL;
+	}
+
+	if (G_OBJECT_CLASS (parent_class)->dispose)
+		(* G_OBJECT_CLASS (parent_class)->dispose) (object);
+}
+
+/* Finalize handler for the calendar view */
+static void
+e_cal_view_finalize (GObject *object)
+{
+	ECalView *view;
+	ECalViewPrivate *priv;
+
+	g_return_if_fail (object != NULL);
+	g_return_if_fail (E_IS_CAL_VIEW (object));
+
+	view = E_CAL_VIEW (object);
+	priv = view->priv;
 
 	g_free (priv);
 
@@ -245,6 +266,7 @@ e_cal_view_class_init (ECalViewClass *kl
 
 	object_class->set_property = e_cal_view_set_property;
 	object_class->get_property = e_cal_view_get_property;
+	object_class->dispose = e_cal_view_dispose;
 	object_class->finalize = e_cal_view_finalize;
 
 	param =  g_param_spec_pointer ("view", "The corba view object", NULL,
